
OpenRoverController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000013e6  0000147a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006c8  00800122  00800122  0000149c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ad7  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6e  00000000  00000000  00004263  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001903  00000000  00000000  000050d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  000069d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001018  00000000  00000000  000070e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002160  00000000  00000000  000080f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000a258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ee       	ldi	r30, 0xE6	; 230
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 32       	cpi	r26, 0x22	; 34
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a2 e2       	ldi	r26, 0x22	; 34
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3e       	cpi	r26, 0xEA	; 234
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 99 06 	call	0xd32	; 0xd32 <main>
      9e:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
      a6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      a8:	03 96       	adiw	r24, 0x03	; 3
      aa:	92 83       	std	Z+2, r25	; 0x02
      ac:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
      ae:	2f ef       	ldi	r18, 0xFF	; 255
      b0:	3f ef       	ldi	r19, 0xFF	; 255
      b2:	34 83       	std	Z+4, r19	; 0x04
      b4:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      b6:	96 83       	std	Z+6, r25	; 0x06
      b8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      ba:	90 87       	std	Z+8, r25	; 0x08
      bc:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
      be:	10 82       	st	Z, r1
      c0:	08 95       	ret

000000c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
      c2:	fc 01       	movw	r30, r24
      c4:	11 86       	std	Z+9, r1	; 0x09
      c6:	10 86       	std	Z+8, r1	; 0x08
      c8:	08 95       	ret

000000ca <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	9c 01       	movw	r18, r24
      d0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
      d2:	dc 01       	movw	r26, r24
      d4:	11 96       	adiw	r26, 0x01	; 1
      d6:	cd 91       	ld	r28, X+
      d8:	dc 91       	ld	r29, X
      da:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
      dc:	d3 83       	std	Z+3, r29	; 0x03
      de:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
      e0:	8c 81       	ldd	r24, Y+4	; 0x04
      e2:	9d 81       	ldd	r25, Y+5	; 0x05
      e4:	95 83       	std	Z+5, r25	; 0x05
      e6:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
      e8:	8c 81       	ldd	r24, Y+4	; 0x04
      ea:	9d 81       	ldd	r25, Y+5	; 0x05
      ec:	dc 01       	movw	r26, r24
      ee:	13 96       	adiw	r26, 0x03	; 3
      f0:	7c 93       	st	X, r23
      f2:	6e 93       	st	-X, r22
      f4:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
      f6:	7d 83       	std	Y+5, r23	; 0x05
      f8:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
      fa:	31 87       	std	Z+9, r19	; 0x09
      fc:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
      fe:	f9 01       	movw	r30, r18
     100:	80 81       	ld	r24, Z
     102:	8f 5f       	subi	r24, 0xFF	; 255
     104:	80 83       	st	Z, r24
}
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     112:	48 81       	ld	r20, Y
     114:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     116:	4f 3f       	cpi	r20, 0xFF	; 255
     118:	2f ef       	ldi	r18, 0xFF	; 255
     11a:	52 07       	cpc	r21, r18
     11c:	21 f4       	brne	.+8      	; 0x126 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     11e:	fc 01       	movw	r30, r24
     120:	a7 81       	ldd	r26, Z+7	; 0x07
     122:	b0 85       	ldd	r27, Z+8	; 0x08
     124:	0d c0       	rjmp	.+26     	; 0x140 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     126:	dc 01       	movw	r26, r24
     128:	13 96       	adiw	r26, 0x03	; 3
     12a:	01 c0       	rjmp	.+2      	; 0x12e <vListInsert+0x22>
     12c:	df 01       	movw	r26, r30
     12e:	12 96       	adiw	r26, 0x02	; 2
     130:	ed 91       	ld	r30, X+
     132:	fc 91       	ld	r31, X
     134:	13 97       	sbiw	r26, 0x03	; 3
     136:	20 81       	ld	r18, Z
     138:	31 81       	ldd	r19, Z+1	; 0x01
     13a:	42 17       	cp	r20, r18
     13c:	53 07       	cpc	r21, r19
     13e:	b0 f7       	brcc	.-20     	; 0x12c <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     140:	12 96       	adiw	r26, 0x02	; 2
     142:	ed 91       	ld	r30, X+
     144:	fc 91       	ld	r31, X
     146:	13 97       	sbiw	r26, 0x03	; 3
     148:	fb 83       	std	Y+3, r31	; 0x03
     14a:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     14c:	d5 83       	std	Z+5, r29	; 0x05
     14e:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     150:	bd 83       	std	Y+5, r27	; 0x05
     152:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     154:	13 96       	adiw	r26, 0x03	; 3
     156:	dc 93       	st	X, r29
     158:	ce 93       	st	-X, r28
     15a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     15c:	99 87       	std	Y+9, r25	; 0x09
     15e:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     160:	fc 01       	movw	r30, r24
     162:	20 81       	ld	r18, Z
     164:	2f 5f       	subi	r18, 0xFF	; 255
     166:	20 83       	st	Z, r18
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     174:	a0 85       	ldd	r26, Z+8	; 0x08
     176:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     178:	c2 81       	ldd	r28, Z+2	; 0x02
     17a:	d3 81       	ldd	r29, Z+3	; 0x03
     17c:	84 81       	ldd	r24, Z+4	; 0x04
     17e:	95 81       	ldd	r25, Z+5	; 0x05
     180:	9d 83       	std	Y+5, r25	; 0x05
     182:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     184:	c4 81       	ldd	r28, Z+4	; 0x04
     186:	d5 81       	ldd	r29, Z+5	; 0x05
     188:	82 81       	ldd	r24, Z+2	; 0x02
     18a:	93 81       	ldd	r25, Z+3	; 0x03
     18c:	9b 83       	std	Y+3, r25	; 0x03
     18e:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     190:	11 96       	adiw	r26, 0x01	; 1
     192:	8d 91       	ld	r24, X+
     194:	9c 91       	ld	r25, X
     196:	12 97       	sbiw	r26, 0x02	; 2
     198:	e8 17       	cp	r30, r24
     19a:	f9 07       	cpc	r31, r25
     19c:	31 f4       	brne	.+12     	; 0x1aa <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     19e:	84 81       	ldd	r24, Z+4	; 0x04
     1a0:	95 81       	ldd	r25, Z+5	; 0x05
     1a2:	12 96       	adiw	r26, 0x02	; 2
     1a4:	9c 93       	st	X, r25
     1a6:	8e 93       	st	-X, r24
     1a8:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     1aa:	11 86       	std	Z+9, r1	; 0x09
     1ac:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     1ae:	8c 91       	ld	r24, X
     1b0:	81 50       	subi	r24, 0x01	; 1
     1b2:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     1c0:	0e 94 0b 04 	call	0x816	; 0x816 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     1c4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     1c8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
     1cc:	89 2b       	or	r24, r25
     1ce:	31 f4       	brne	.+12     	; 0x1dc <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     1d0:	87 e2       	ldi	r24, 0x27	; 39
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
     1d8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     1dc:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <xNextFreeByte>
     1e0:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <xNextFreeByte+0x1>
     1e4:	c9 01       	movw	r24, r18
     1e6:	8c 0f       	add	r24, r28
     1e8:	9d 1f       	adc	r25, r29
     1ea:	8b 3d       	cpi	r24, 0xDB	; 219
     1ec:	45 e0       	ldi	r20, 0x05	; 5
     1ee:	94 07       	cpc	r25, r20
     1f0:	70 f4       	brcc	.+28     	; 0x20e <pvPortMalloc+0x54>
     1f2:	28 17       	cp	r18, r24
     1f4:	39 07       	cpc	r19, r25
     1f6:	70 f4       	brcc	.+28     	; 0x214 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     1f8:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <__data_end>
     1fc:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <__data_end+0x1>
     200:	c2 0f       	add	r28, r18
     202:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     204:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <xNextFreeByte+0x1>
     208:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <xNextFreeByte>
     20c:	05 c0       	rjmp	.+10     	; 0x218 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <pvPortMalloc+0x5e>
     214:	c0 e0       	ldi	r28, 0x00	; 0
     216:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     218:	0e 94 cc 04 	call	0x998	; 0x998 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     21c:	ce 01       	movw	r24, r28
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     224:	08 95       	ret

00000226 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     226:	31 e1       	ldi	r19, 0x11	; 17
     228:	fc 01       	movw	r30, r24
     22a:	30 83       	st	Z, r19
     22c:	31 97       	sbiw	r30, 0x01	; 1
     22e:	22 e2       	ldi	r18, 0x22	; 34
     230:	20 83       	st	Z, r18
     232:	31 97       	sbiw	r30, 0x01	; 1
     234:	a3 e3       	ldi	r26, 0x33	; 51
     236:	a0 83       	st	Z, r26
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	60 83       	st	Z, r22
     23c:	31 97       	sbiw	r30, 0x01	; 1
     23e:	70 83       	st	Z, r23
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	10 82       	st	Z, r1
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	60 e8       	ldi	r22, 0x80	; 128
     248:	60 83       	st	Z, r22
     24a:	31 97       	sbiw	r30, 0x01	; 1
     24c:	10 82       	st	Z, r1
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	62 e0       	ldi	r22, 0x02	; 2
     252:	60 83       	st	Z, r22
     254:	31 97       	sbiw	r30, 0x01	; 1
     256:	63 e0       	ldi	r22, 0x03	; 3
     258:	60 83       	st	Z, r22
     25a:	31 97       	sbiw	r30, 0x01	; 1
     25c:	64 e0       	ldi	r22, 0x04	; 4
     25e:	60 83       	st	Z, r22
     260:	31 97       	sbiw	r30, 0x01	; 1
     262:	65 e0       	ldi	r22, 0x05	; 5
     264:	60 83       	st	Z, r22
     266:	31 97       	sbiw	r30, 0x01	; 1
     268:	66 e0       	ldi	r22, 0x06	; 6
     26a:	60 83       	st	Z, r22
     26c:	31 97       	sbiw	r30, 0x01	; 1
     26e:	67 e0       	ldi	r22, 0x07	; 7
     270:	60 83       	st	Z, r22
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	68 e0       	ldi	r22, 0x08	; 8
     276:	60 83       	st	Z, r22
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	69 e0       	ldi	r22, 0x09	; 9
     27c:	60 83       	st	Z, r22
     27e:	31 97       	sbiw	r30, 0x01	; 1
     280:	60 e1       	ldi	r22, 0x10	; 16
     282:	60 83       	st	Z, r22
     284:	31 97       	sbiw	r30, 0x01	; 1
     286:	30 83       	st	Z, r19
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	32 e1       	ldi	r19, 0x12	; 18
     28c:	30 83       	st	Z, r19
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	33 e1       	ldi	r19, 0x13	; 19
     292:	30 83       	st	Z, r19
     294:	31 97       	sbiw	r30, 0x01	; 1
     296:	34 e1       	ldi	r19, 0x14	; 20
     298:	30 83       	st	Z, r19
     29a:	31 97       	sbiw	r30, 0x01	; 1
     29c:	35 e1       	ldi	r19, 0x15	; 21
     29e:	30 83       	st	Z, r19
     2a0:	31 97       	sbiw	r30, 0x01	; 1
     2a2:	36 e1       	ldi	r19, 0x16	; 22
     2a4:	30 83       	st	Z, r19
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	37 e1       	ldi	r19, 0x17	; 23
     2aa:	30 83       	st	Z, r19
     2ac:	31 97       	sbiw	r30, 0x01	; 1
     2ae:	38 e1       	ldi	r19, 0x18	; 24
     2b0:	30 83       	st	Z, r19
     2b2:	31 97       	sbiw	r30, 0x01	; 1
     2b4:	39 e1       	ldi	r19, 0x19	; 25
     2b6:	30 83       	st	Z, r19
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	30 e2       	ldi	r19, 0x20	; 32
     2bc:	30 83       	st	Z, r19
     2be:	31 97       	sbiw	r30, 0x01	; 1
     2c0:	31 e2       	ldi	r19, 0x21	; 33
     2c2:	30 83       	st	Z, r19
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	20 83       	st	Z, r18
     2c8:	31 97       	sbiw	r30, 0x01	; 1
     2ca:	23 e2       	ldi	r18, 0x23	; 35
     2cc:	20 83       	st	Z, r18
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	40 83       	st	Z, r20
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	50 83       	st	Z, r21
     2d6:	31 97       	sbiw	r30, 0x01	; 1
     2d8:	26 e2       	ldi	r18, 0x26	; 38
     2da:	20 83       	st	Z, r18
     2dc:	31 97       	sbiw	r30, 0x01	; 1
     2de:	27 e2       	ldi	r18, 0x27	; 39
     2e0:	20 83       	st	Z, r18
     2e2:	31 97       	sbiw	r30, 0x01	; 1
     2e4:	28 e2       	ldi	r18, 0x28	; 40
     2e6:	20 83       	st	Z, r18
     2e8:	31 97       	sbiw	r30, 0x01	; 1
     2ea:	29 e2       	ldi	r18, 0x29	; 41
     2ec:	20 83       	st	Z, r18
     2ee:	31 97       	sbiw	r30, 0x01	; 1
     2f0:	20 e3       	ldi	r18, 0x30	; 48
     2f2:	20 83       	st	Z, r18
     2f4:	31 97       	sbiw	r30, 0x01	; 1
     2f6:	21 e3       	ldi	r18, 0x31	; 49
     2f8:	20 83       	st	Z, r18
     2fa:	86 97       	sbiw	r24, 0x26	; 38
     2fc:	08 95       	ret

000002fe <xPortStartScheduler>:
     2fe:	89 ef       	ldi	r24, 0xF9	; 249
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     306:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     30a:	e0 e8       	ldi	r30, 0x80	; 128
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	8c 7f       	andi	r24, 0xFC	; 252
     312:	80 83       	st	Z, r24
     314:	8b e0       	ldi	r24, 0x0B	; 11
     316:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     31a:	ef e6       	ldi	r30, 0x6F	; 111
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	82 60       	ori	r24, 0x02	; 2
     322:	80 83       	st	Z, r24
     324:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <pxCurrentTCB>
     328:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     32c:	cd 91       	ld	r28, X+
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	dd 91       	ld	r29, X+
     332:	de bf       	out	0x3e, r29	; 62
     334:	ff 91       	pop	r31
     336:	ef 91       	pop	r30
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	bf 91       	pop	r27
     33e:	af 91       	pop	r26
     340:	9f 91       	pop	r25
     342:	8f 91       	pop	r24
     344:	7f 91       	pop	r23
     346:	6f 91       	pop	r22
     348:	5f 91       	pop	r21
     34a:	4f 91       	pop	r20
     34c:	3f 91       	pop	r19
     34e:	2f 91       	pop	r18
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	af 90       	pop	r10
     360:	9f 90       	pop	r9
     362:	8f 90       	pop	r8
     364:	7f 90       	pop	r7
     366:	6f 90       	pop	r6
     368:	5f 90       	pop	r5
     36a:	4f 90       	pop	r4
     36c:	3f 90       	pop	r3
     36e:	2f 90       	pop	r2
     370:	1f 90       	pop	r1
     372:	0f 90       	pop	r0
     374:	0f be       	out	0x3f, r0	; 63
     376:	0f 90       	pop	r0
     378:	08 95       	ret
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	08 95       	ret

0000037e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     37e:	0f 92       	push	r0
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	0f 92       	push	r0
     386:	1f 92       	push	r1
     388:	11 24       	eor	r1, r1
     38a:	2f 92       	push	r2
     38c:	3f 92       	push	r3
     38e:	4f 92       	push	r4
     390:	5f 92       	push	r5
     392:	6f 92       	push	r6
     394:	7f 92       	push	r7
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	2f 93       	push	r18
     3ac:	3f 93       	push	r19
     3ae:	4f 93       	push	r20
     3b0:	5f 93       	push	r21
     3b2:	6f 93       	push	r22
     3b4:	7f 93       	push	r23
     3b6:	8f 93       	push	r24
     3b8:	9f 93       	push	r25
     3ba:	af 93       	push	r26
     3bc:	bf 93       	push	r27
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ef 93       	push	r30
     3c4:	ff 93       	push	r31
     3c6:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <pxCurrentTCB>
     3ca:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     3ce:	0d b6       	in	r0, 0x3d	; 61
     3d0:	0d 92       	st	X+, r0
     3d2:	0e b6       	in	r0, 0x3e	; 62
     3d4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     3d6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     3da:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <pxCurrentTCB>
     3de:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     3e2:	cd 91       	ld	r28, X+
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	dd 91       	ld	r29, X+
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	ff 91       	pop	r31
     3ec:	ef 91       	pop	r30
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	bf 91       	pop	r27
     3f4:	af 91       	pop	r26
     3f6:	9f 91       	pop	r25
     3f8:	8f 91       	pop	r24
     3fa:	7f 91       	pop	r23
     3fc:	6f 91       	pop	r22
     3fe:	5f 91       	pop	r21
     400:	4f 91       	pop	r20
     402:	3f 91       	pop	r19
     404:	2f 91       	pop	r18
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	cf 90       	pop	r12
     412:	bf 90       	pop	r11
     414:	af 90       	pop	r10
     416:	9f 90       	pop	r9
     418:	8f 90       	pop	r8
     41a:	7f 90       	pop	r7
     41c:	6f 90       	pop	r6
     41e:	5f 90       	pop	r5
     420:	4f 90       	pop	r4
     422:	3f 90       	pop	r3
     424:	2f 90       	pop	r2
     426:	1f 90       	pop	r1
     428:	0f 90       	pop	r0
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     42e:	08 95       	ret

00000430 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     430:	0f 92       	push	r0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	0f 92       	push	r0
     438:	1f 92       	push	r1
     43a:	11 24       	eor	r1, r1
     43c:	2f 92       	push	r2
     43e:	3f 92       	push	r3
     440:	4f 92       	push	r4
     442:	5f 92       	push	r5
     444:	6f 92       	push	r6
     446:	7f 92       	push	r7
     448:	8f 92       	push	r8
     44a:	9f 92       	push	r9
     44c:	af 92       	push	r10
     44e:	bf 92       	push	r11
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	2f 93       	push	r18
     45e:	3f 93       	push	r19
     460:	4f 93       	push	r20
     462:	5f 93       	push	r21
     464:	6f 93       	push	r22
     466:	7f 93       	push	r23
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
     46c:	af 93       	push	r26
     46e:	bf 93       	push	r27
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ef 93       	push	r30
     476:	ff 93       	push	r31
     478:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <pxCurrentTCB>
     47c:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     480:	0d b6       	in	r0, 0x3d	; 61
     482:	0d 92       	st	X+, r0
     484:	0e b6       	in	r0, 0x3e	; 62
     486:	0d 92       	st	X+, r0
	xTaskIncrementTick();
     488:	0e 94 11 04 	call	0x822	; 0x822 <xTaskIncrementTick>
	vTaskSwitchContext();
     48c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     490:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <pxCurrentTCB>
     494:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     498:	cd 91       	ld	r28, X+
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	dd 91       	ld	r29, X+
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	ff 91       	pop	r31
     4a2:	ef 91       	pop	r30
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	7f 91       	pop	r23
     4b2:	6f 91       	pop	r22
     4b4:	5f 91       	pop	r21
     4b6:	4f 91       	pop	r20
     4b8:	3f 91       	pop	r19
     4ba:	2f 91       	pop	r18
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	9f 90       	pop	r9
     4ce:	8f 90       	pop	r8
     4d0:	7f 90       	pop	r7
     4d2:	6f 90       	pop	r6
     4d4:	5f 90       	pop	r5
     4d6:	4f 90       	pop	r4
     4d8:	3f 90       	pop	r3
     4da:	2f 90       	pop	r2
     4dc:	1f 90       	pop	r1
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0

	asm volatile ( "ret" );
     4e4:	08 95       	ret

000004e6 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     4e6:	0e 94 18 02 	call	0x430	; 0x430 <vPortYieldFromTick>
		asm volatile ( "reti" );
     4ea:	18 95       	reti

000004ec <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     4ec:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <pxDelayedTaskList>
     4f0:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
     4f4:	80 81       	ld	r24, Z
     4f6:	81 11       	cpse	r24, r1
     4f8:	07 c0       	rjmp	.+14     	; 0x508 <prvResetNextTaskUnblockTime+0x1c>
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	9f ef       	ldi	r25, 0xFF	; 255
     4fe:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <xNextTaskUnblockTime+0x1>
     502:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <xNextTaskUnblockTime>
     506:	08 95       	ret
     508:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <pxDelayedTaskList>
     50c:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
     510:	05 80       	ldd	r0, Z+5	; 0x05
     512:	f6 81       	ldd	r31, Z+6	; 0x06
     514:	e0 2d       	mov	r30, r0
     516:	06 80       	ldd	r0, Z+6	; 0x06
     518:	f7 81       	ldd	r31, Z+7	; 0x07
     51a:	e0 2d       	mov	r30, r0
     51c:	82 81       	ldd	r24, Z+2	; 0x02
     51e:	93 81       	ldd	r25, Z+3	; 0x03
     520:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <xNextTaskUnblockTime+0x1>
     524:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <xNextTaskUnblockTime>
     528:	08 95       	ret

0000052a <prvAddCurrentTaskToDelayedList>:
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	ec 01       	movw	r28, r24
     534:	00 91 0d 07 	lds	r16, 0x070D	; 0x80070d <xTickCount>
     538:	10 91 0e 07 	lds	r17, 0x070E	; 0x80070e <xTickCount+0x1>
     53c:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <pxCurrentTCB>
     540:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     544:	02 96       	adiw	r24, 0x02	; 2
     546:	0e 94 b7 00 	call	0x16e	; 0x16e <uxListRemove>
     54a:	c0 0f       	add	r28, r16
     54c:	d1 1f       	adc	r29, r17
     54e:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxCurrentTCB>
     552:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     556:	d3 83       	std	Z+3, r29	; 0x03
     558:	c2 83       	std	Z+2, r28	; 0x02
     55a:	c0 17       	cp	r28, r16
     55c:	d1 07       	cpc	r29, r17
     55e:	68 f4       	brcc	.+26     	; 0x57a <prvAddCurrentTaskToDelayedList+0x50>
     560:	60 91 5d 07 	lds	r22, 0x075D	; 0x80075d <pxCurrentTCB>
     564:	70 91 5e 07 	lds	r23, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     568:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <pxOverflowDelayedTaskList>
     56c:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <pxOverflowDelayedTaskList+0x1>
     570:	6e 5f       	subi	r22, 0xFE	; 254
     572:	7f 4f       	sbci	r23, 0xFF	; 255
     574:	0e 94 86 00 	call	0x10c	; 0x10c <vListInsert>
     578:	17 c0       	rjmp	.+46     	; 0x5a8 <prvAddCurrentTaskToDelayedList+0x7e>
     57a:	60 91 5d 07 	lds	r22, 0x075D	; 0x80075d <pxCurrentTCB>
     57e:	70 91 5e 07 	lds	r23, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     582:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <pxDelayedTaskList>
     586:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
     58a:	6e 5f       	subi	r22, 0xFE	; 254
     58c:	7f 4f       	sbci	r23, 0xFF	; 255
     58e:	0e 94 86 00 	call	0x10c	; 0x10c <vListInsert>
     592:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <xNextTaskUnblockTime>
     596:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <xNextTaskUnblockTime+0x1>
     59a:	c8 17       	cp	r28, r24
     59c:	d9 07       	cpc	r29, r25
     59e:	20 f4       	brcc	.+8      	; 0x5a8 <prvAddCurrentTaskToDelayedList+0x7e>
     5a0:	d0 93 06 07 	sts	0x0706, r29	; 0x800706 <xNextTaskUnblockTime+0x1>
     5a4:	c0 93 05 07 	sts	0x0705, r28	; 0x800705 <xNextTaskUnblockTime>
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	08 95       	ret

000005b2 <xTaskCreate>:
     5b2:	4f 92       	push	r4
     5b4:	5f 92       	push	r5
     5b6:	6f 92       	push	r6
     5b8:	7f 92       	push	r7
     5ba:	8f 92       	push	r8
     5bc:	9f 92       	push	r9
     5be:	af 92       	push	r10
     5c0:	bf 92       	push	r11
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	4c 01       	movw	r8, r24
     5d2:	6b 01       	movw	r12, r22
     5d4:	5a 01       	movw	r10, r20
     5d6:	29 01       	movw	r4, r18
     5d8:	ca 01       	movw	r24, r20
     5da:	0e 94 dd 00 	call	0x1ba	; 0x1ba <pvPortMalloc>
     5de:	3c 01       	movw	r6, r24
     5e0:	89 2b       	or	r24, r25
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <xTaskCreate+0x34>
     5e4:	dd c0       	rjmp	.+442    	; 0x7a0 <xTaskCreate+0x1ee>
     5e6:	86 e2       	ldi	r24, 0x26	; 38
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 dd 00 	call	0x1ba	; 0x1ba <pvPortMalloc>
     5ee:	ec 01       	movw	r28, r24
     5f0:	89 2b       	or	r24, r25
     5f2:	71 f0       	breq	.+28     	; 0x610 <xTaskCreate+0x5e>
     5f4:	78 8e       	std	Y+24, r7	; 0x18
     5f6:	6f 8a       	std	Y+23, r6	; 0x17
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	a8 1a       	sub	r10, r24
     5fc:	b1 08       	sbc	r11, r1
     5fe:	a6 0c       	add	r10, r6
     600:	b7 1c       	adc	r11, r7
     602:	d6 01       	movw	r26, r12
     604:	8c 91       	ld	r24, X
     606:	89 8f       	std	Y+25, r24	; 0x19
     608:	8c 91       	ld	r24, X
     60a:	81 11       	cpse	r24, r1
     60c:	05 c0       	rjmp	.+10     	; 0x618 <xTaskCreate+0x66>
     60e:	18 c0       	rjmp	.+48     	; 0x640 <xTaskCreate+0x8e>
     610:	c3 01       	movw	r24, r6
     612:	0e 94 12 01 	call	0x224	; 0x224 <vPortFree>
     616:	c4 c0       	rjmp	.+392    	; 0x7a0 <xTaskCreate+0x1ee>
     618:	ae 01       	movw	r20, r28
     61a:	46 5e       	subi	r20, 0xE6	; 230
     61c:	5f 4f       	sbci	r21, 0xFF	; 255
     61e:	f6 01       	movw	r30, r12
     620:	31 96       	adiw	r30, 0x01	; 1
     622:	b8 e0       	ldi	r27, 0x08	; 8
     624:	cb 0e       	add	r12, r27
     626:	d1 1c       	adc	r13, r1
     628:	cf 01       	movw	r24, r30
     62a:	21 91       	ld	r18, Z+
     62c:	da 01       	movw	r26, r20
     62e:	2d 93       	st	X+, r18
     630:	ad 01       	movw	r20, r26
     632:	dc 01       	movw	r26, r24
     634:	8c 91       	ld	r24, X
     636:	88 23       	and	r24, r24
     638:	19 f0       	breq	.+6      	; 0x640 <xTaskCreate+0x8e>
     63a:	ec 15       	cp	r30, r12
     63c:	fd 05       	cpc	r31, r13
     63e:	a1 f7       	brne	.-24     	; 0x628 <xTaskCreate+0x76>
     640:	18 a2       	std	Y+32, r1	; 0x20
     642:	04 30       	cpi	r16, 0x04	; 4
     644:	08 f0       	brcs	.+2      	; 0x648 <xTaskCreate+0x96>
     646:	03 e0       	ldi	r16, 0x03	; 3
     648:	0e 8b       	std	Y+22, r16	; 0x16
     64a:	6e 01       	movw	r12, r28
     64c:	b2 e0       	ldi	r27, 0x02	; 2
     64e:	cb 0e       	add	r12, r27
     650:	d1 1c       	adc	r13, r1
     652:	c6 01       	movw	r24, r12
     654:	0e 94 61 00 	call	0xc2	; 0xc2 <vListInitialiseItem>
     658:	ce 01       	movw	r24, r28
     65a:	0c 96       	adiw	r24, 0x0c	; 12
     65c:	0e 94 61 00 	call	0xc2	; 0xc2 <vListInitialiseItem>
     660:	d9 87       	std	Y+9, r29	; 0x09
     662:	c8 87       	std	Y+8, r28	; 0x08
     664:	84 e0       	ldi	r24, 0x04	; 4
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	80 1b       	sub	r24, r16
     66a:	91 09       	sbc	r25, r1
     66c:	9d 87       	std	Y+13, r25	; 0x0d
     66e:	8c 87       	std	Y+12, r24	; 0x0c
     670:	db 8b       	std	Y+19, r29	; 0x13
     672:	ca 8b       	std	Y+18, r28	; 0x12
     674:	19 a2       	std	Y+33, r1	; 0x21
     676:	1a a2       	std	Y+34, r1	; 0x22
     678:	1b a2       	std	Y+35, r1	; 0x23
     67a:	1c a2       	std	Y+36, r1	; 0x24
     67c:	1d a2       	std	Y+37, r1	; 0x25
     67e:	a2 01       	movw	r20, r4
     680:	b4 01       	movw	r22, r8
     682:	c5 01       	movw	r24, r10
     684:	0e 94 13 01 	call	0x226	; 0x226 <pxPortInitialiseStack>
     688:	99 83       	std	Y+1, r25	; 0x01
     68a:	88 83       	st	Y, r24
     68c:	e1 14       	cp	r14, r1
     68e:	f1 04       	cpc	r15, r1
     690:	19 f0       	breq	.+6      	; 0x698 <xTaskCreate+0xe6>
     692:	f7 01       	movw	r30, r14
     694:	d1 83       	std	Z+1, r29	; 0x01
     696:	c0 83       	st	Z, r28
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	0f 92       	push	r0
     69e:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxCurrentNumberOfTasks>
     6a2:	8f 5f       	subi	r24, 0xFF	; 255
     6a4:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <uxCurrentNumberOfTasks>
     6a8:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <pxCurrentTCB>
     6ac:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     6b0:	89 2b       	or	r24, r25
     6b2:	a9 f5       	brne	.+106    	; 0x71e <xTaskCreate+0x16c>
     6b4:	d0 93 5e 07 	sts	0x075E, r29	; 0x80075e <pxCurrentTCB+0x1>
     6b8:	c0 93 5d 07 	sts	0x075D, r28	; 0x80075d <pxCurrentTCB>
     6bc:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxCurrentNumberOfTasks>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	e9 f5       	brne	.+122    	; 0x73e <xTaskCreate+0x18c>
     6c4:	89 e3       	ldi	r24, 0x39	; 57
     6c6:	97 e0       	ldi	r25, 0x07	; 7
     6c8:	0e 94 53 00 	call	0xa6	; 0xa6 <vListInitialise>
     6cc:	82 e4       	ldi	r24, 0x42	; 66
     6ce:	97 e0       	ldi	r25, 0x07	; 7
     6d0:	0e 94 53 00 	call	0xa6	; 0xa6 <vListInitialise>
     6d4:	8b e4       	ldi	r24, 0x4B	; 75
     6d6:	97 e0       	ldi	r25, 0x07	; 7
     6d8:	0e 94 53 00 	call	0xa6	; 0xa6 <vListInitialise>
     6dc:	84 e5       	ldi	r24, 0x54	; 84
     6de:	97 e0       	ldi	r25, 0x07	; 7
     6e0:	0e 94 53 00 	call	0xa6	; 0xa6 <vListInitialise>
     6e4:	80 e3       	ldi	r24, 0x30	; 48
     6e6:	97 e0       	ldi	r25, 0x07	; 7
     6e8:	0e 94 53 00 	call	0xa6	; 0xa6 <vListInitialise>
     6ec:	87 e2       	ldi	r24, 0x27	; 39
     6ee:	97 e0       	ldi	r25, 0x07	; 7
     6f0:	0e 94 53 00 	call	0xa6	; 0xa6 <vListInitialise>
     6f4:	8a e1       	ldi	r24, 0x1A	; 26
     6f6:	97 e0       	ldi	r25, 0x07	; 7
     6f8:	0e 94 53 00 	call	0xa6	; 0xa6 <vListInitialise>
     6fc:	81 e1       	ldi	r24, 0x11	; 17
     6fe:	97 e0       	ldi	r25, 0x07	; 7
     700:	0e 94 53 00 	call	0xa6	; 0xa6 <vListInitialise>
     704:	80 e3       	ldi	r24, 0x30	; 48
     706:	97 e0       	ldi	r25, 0x07	; 7
     708:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <pxDelayedTaskList+0x1>
     70c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <pxDelayedTaskList>
     710:	87 e2       	ldi	r24, 0x27	; 39
     712:	97 e0       	ldi	r25, 0x07	; 7
     714:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <pxOverflowDelayedTaskList+0x1>
     718:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <pxOverflowDelayedTaskList>
     71c:	10 c0       	rjmp	.+32     	; 0x73e <xTaskCreate+0x18c>
     71e:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xSchedulerRunning>
     722:	81 11       	cpse	r24, r1
     724:	0c c0       	rjmp	.+24     	; 0x73e <xTaskCreate+0x18c>
     726:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxCurrentTCB>
     72a:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     72e:	96 89       	ldd	r25, Z+22	; 0x16
     730:	8e 89       	ldd	r24, Y+22	; 0x16
     732:	89 17       	cp	r24, r25
     734:	20 f0       	brcs	.+8      	; 0x73e <xTaskCreate+0x18c>
     736:	d0 93 5e 07 	sts	0x075E, r29	; 0x80075e <pxCurrentTCB+0x1>
     73a:	c0 93 5d 07 	sts	0x075D, r28	; 0x80075d <pxCurrentTCB>
     73e:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxTaskNumber>
     742:	8f 5f       	subi	r24, 0xFF	; 255
     744:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <uxTaskNumber>
     748:	8e 89       	ldd	r24, Y+22	; 0x16
     74a:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <uxTopReadyPriority>
     74e:	98 17       	cp	r25, r24
     750:	10 f4       	brcc	.+4      	; 0x756 <xTaskCreate+0x1a4>
     752:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxTopReadyPriority>
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	9c 01       	movw	r18, r24
     75a:	22 0f       	add	r18, r18
     75c:	33 1f       	adc	r19, r19
     75e:	22 0f       	add	r18, r18
     760:	33 1f       	adc	r19, r19
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	82 0f       	add	r24, r18
     768:	93 1f       	adc	r25, r19
     76a:	b6 01       	movw	r22, r12
     76c:	87 5c       	subi	r24, 0xC7	; 199
     76e:	98 4f       	sbci	r25, 0xF8	; 248
     770:	0e 94 65 00 	call	0xca	; 0xca <vListInsertEnd>
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xSchedulerRunning>
     77c:	88 23       	and	r24, r24
     77e:	61 f0       	breq	.+24     	; 0x798 <xTaskCreate+0x1e6>
     780:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxCurrentTCB>
     784:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     788:	96 89       	ldd	r25, Z+22	; 0x16
     78a:	8e 89       	ldd	r24, Y+22	; 0x16
     78c:	98 17       	cp	r25, r24
     78e:	30 f4       	brcc	.+12     	; 0x79c <xTaskCreate+0x1ea>
     790:	0e 94 bf 01 	call	0x37e	; 0x37e <vPortYield>
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <xTaskCreate+0x1f0>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <xTaskCreate+0x1f0>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <xTaskCreate+0x1f0>
     7a0:	8f ef       	ldi	r24, 0xFF	; 255
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	9f 90       	pop	r9
     7b6:	8f 90       	pop	r8
     7b8:	7f 90       	pop	r7
     7ba:	6f 90       	pop	r6
     7bc:	5f 90       	pop	r5
     7be:	4f 90       	pop	r4
     7c0:	08 95       	ret

000007c2 <vTaskStartScheduler>:
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f3 e0       	ldi	r31, 0x03	; 3
     7cc:	ef 2e       	mov	r14, r31
     7ce:	f7 e0       	ldi	r31, 0x07	; 7
     7d0:	ff 2e       	mov	r15, r31
     7d2:	f0 2d       	mov	r31, r0
     7d4:	00 e0       	ldi	r16, 0x00	; 0
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	45 e5       	ldi	r20, 0x55	; 85
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	64 e0       	ldi	r22, 0x04	; 4
     7e0:	71 e0       	ldi	r23, 0x01	; 1
     7e2:	8f e5       	ldi	r24, 0x5F	; 95
     7e4:	95 e0       	ldi	r25, 0x05	; 5
     7e6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xTaskCreate>
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	81 f4       	brne	.+32     	; 0x80e <vTaskStartScheduler+0x4c>
     7ee:	f8 94       	cli
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	9f ef       	ldi	r25, 0xFF	; 255
     7f4:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <xNextTaskUnblockTime+0x1>
     7f8:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <xNextTaskUnblockTime>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <xSchedulerRunning>
     802:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <xTickCount+0x1>
     806:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <xTickCount>
     80a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <xPortStartScheduler>
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	08 95       	ret

00000816 <vTaskSuspendAll>:
     816:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxSchedulerSuspended>
     81a:	8f 5f       	subi	r24, 0xFF	; 255
     81c:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <uxSchedulerSuspended>
     820:	08 95       	ret

00000822 <xTaskIncrementTick>:
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxSchedulerSuspended>
     836:	81 11       	cpse	r24, r1
     838:	99 c0       	rjmp	.+306    	; 0x96c <__stack+0x6d>
     83a:	e0 90 0d 07 	lds	r14, 0x070D	; 0x80070d <xTickCount>
     83e:	f0 90 0e 07 	lds	r15, 0x070E	; 0x80070e <xTickCount+0x1>
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	e8 1a       	sub	r14, r24
     846:	f8 0a       	sbc	r15, r24
     848:	f0 92 0e 07 	sts	0x070E, r15	; 0x80070e <xTickCount+0x1>
     84c:	e0 92 0d 07 	sts	0x070D, r14	; 0x80070d <xTickCount>
     850:	e1 14       	cp	r14, r1
     852:	f1 04       	cpc	r15, r1
     854:	b9 f4       	brne	.+46     	; 0x884 <xTaskIncrementTick+0x62>
     856:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <pxDelayedTaskList>
     85a:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
     85e:	20 91 23 07 	lds	r18, 0x0723	; 0x800723 <pxOverflowDelayedTaskList>
     862:	30 91 24 07 	lds	r19, 0x0724	; 0x800724 <pxOverflowDelayedTaskList+0x1>
     866:	30 93 26 07 	sts	0x0726, r19	; 0x800726 <pxDelayedTaskList+0x1>
     86a:	20 93 25 07 	sts	0x0725, r18	; 0x800725 <pxDelayedTaskList>
     86e:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <pxOverflowDelayedTaskList+0x1>
     872:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <pxOverflowDelayedTaskList>
     876:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xNumOfOverflows>
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <xNumOfOverflows>
     880:	0e 94 76 02 	call	0x4ec	; 0x4ec <prvResetNextTaskUnblockTime>
     884:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <xNextTaskUnblockTime>
     888:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <xNextTaskUnblockTime+0x1>
     88c:	e8 16       	cp	r14, r24
     88e:	f9 06       	cpc	r15, r25
     890:	10 f4       	brcc	.+4      	; 0x896 <xTaskIncrementTick+0x74>
     892:	d1 2c       	mov	r13, r1
     894:	53 c0       	rjmp	.+166    	; 0x93c <__stack+0x3d>
     896:	d1 2c       	mov	r13, r1
     898:	cc 24       	eor	r12, r12
     89a:	c3 94       	inc	r12
     89c:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <pxDelayedTaskList>
     8a0:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
     8a4:	80 81       	ld	r24, Z
     8a6:	81 11       	cpse	r24, r1
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <xTaskIncrementTick+0x96>
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	9f ef       	ldi	r25, 0xFF	; 255
     8ae:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <xNextTaskUnblockTime+0x1>
     8b2:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <xNextTaskUnblockTime>
     8b6:	42 c0       	rjmp	.+132    	; 0x93c <__stack+0x3d>
     8b8:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <pxDelayedTaskList>
     8bc:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
     8c0:	05 80       	ldd	r0, Z+5	; 0x05
     8c2:	f6 81       	ldd	r31, Z+6	; 0x06
     8c4:	e0 2d       	mov	r30, r0
     8c6:	c6 81       	ldd	r28, Z+6	; 0x06
     8c8:	d7 81       	ldd	r29, Z+7	; 0x07
     8ca:	8a 81       	ldd	r24, Y+2	; 0x02
     8cc:	9b 81       	ldd	r25, Y+3	; 0x03
     8ce:	e8 16       	cp	r14, r24
     8d0:	f9 06       	cpc	r15, r25
     8d2:	28 f4       	brcc	.+10     	; 0x8de <xTaskIncrementTick+0xbc>
     8d4:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <xNextTaskUnblockTime+0x1>
     8d8:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <xNextTaskUnblockTime>
     8dc:	2f c0       	rjmp	.+94     	; 0x93c <__stack+0x3d>
     8de:	8e 01       	movw	r16, r28
     8e0:	0e 5f       	subi	r16, 0xFE	; 254
     8e2:	1f 4f       	sbci	r17, 0xFF	; 255
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 b7 00 	call	0x16e	; 0x16e <uxListRemove>
     8ea:	8c 89       	ldd	r24, Y+20	; 0x14
     8ec:	9d 89       	ldd	r25, Y+21	; 0x15
     8ee:	89 2b       	or	r24, r25
     8f0:	21 f0       	breq	.+8      	; 0x8fa <xTaskIncrementTick+0xd8>
     8f2:	ce 01       	movw	r24, r28
     8f4:	0c 96       	adiw	r24, 0x0c	; 12
     8f6:	0e 94 b7 00 	call	0x16e	; 0x16e <uxListRemove>
     8fa:	8e 89       	ldd	r24, Y+22	; 0x16
     8fc:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <uxTopReadyPriority>
     900:	98 17       	cp	r25, r24
     902:	10 f4       	brcc	.+4      	; 0x908 <__stack+0x9>
     904:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxTopReadyPriority>
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	9c 01       	movw	r18, r24
     90c:	22 0f       	add	r18, r18
     90e:	33 1f       	adc	r19, r19
     910:	22 0f       	add	r18, r18
     912:	33 1f       	adc	r19, r19
     914:	22 0f       	add	r18, r18
     916:	33 1f       	adc	r19, r19
     918:	82 0f       	add	r24, r18
     91a:	93 1f       	adc	r25, r19
     91c:	b8 01       	movw	r22, r16
     91e:	87 5c       	subi	r24, 0xC7	; 199
     920:	98 4f       	sbci	r25, 0xF8	; 248
     922:	0e 94 65 00 	call	0xca	; 0xca <vListInsertEnd>
     926:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxCurrentTCB>
     92a:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     92e:	9e 89       	ldd	r25, Y+22	; 0x16
     930:	86 89       	ldd	r24, Z+22	; 0x16
     932:	98 17       	cp	r25, r24
     934:	08 f4       	brcc	.+2      	; 0x938 <__stack+0x39>
     936:	b2 cf       	rjmp	.-156    	; 0x89c <xTaskIncrementTick+0x7a>
     938:	dc 2c       	mov	r13, r12
     93a:	b0 cf       	rjmp	.-160    	; 0x89c <xTaskIncrementTick+0x7a>
     93c:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxCurrentTCB>
     940:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     944:	86 89       	ldd	r24, Z+22	; 0x16
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	fc 01       	movw	r30, r24
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	8e 0f       	add	r24, r30
     958:	9f 1f       	adc	r25, r31
     95a:	fc 01       	movw	r30, r24
     95c:	e7 5c       	subi	r30, 0xC7	; 199
     95e:	f8 4f       	sbci	r31, 0xF8	; 248
     960:	80 81       	ld	r24, Z
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	48 f0       	brcs	.+18     	; 0x978 <__stack+0x79>
     966:	dd 24       	eor	r13, r13
     968:	d3 94       	inc	r13
     96a:	06 c0       	rjmp	.+12     	; 0x978 <__stack+0x79>
     96c:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxPendedTicks>
     970:	8f 5f       	subi	r24, 0xFF	; 255
     972:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxPendedTicks>
     976:	d1 2c       	mov	r13, r1
     978:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <xYieldPending>
     97c:	88 23       	and	r24, r24
     97e:	11 f0       	breq	.+4      	; 0x984 <__stack+0x85>
     980:	dd 24       	eor	r13, r13
     982:	d3 94       	inc	r13
     984:	8d 2d       	mov	r24, r13
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	08 95       	ret

00000998 <xTaskResumeAll>:
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	0f 92       	push	r0
     9ac:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxSchedulerSuspended>
     9b0:	81 50       	subi	r24, 0x01	; 1
     9b2:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <uxSchedulerSuspended>
     9b6:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxSchedulerSuspended>
     9ba:	81 11       	cpse	r24, r1
     9bc:	5f c0       	rjmp	.+190    	; 0xa7c <xTaskResumeAll+0xe4>
     9be:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxCurrentNumberOfTasks>
     9c2:	81 11       	cpse	r24, r1
     9c4:	33 c0       	rjmp	.+102    	; 0xa2c <xTaskResumeAll+0x94>
     9c6:	5d c0       	rjmp	.+186    	; 0xa82 <xTaskResumeAll+0xea>
     9c8:	d7 01       	movw	r26, r14
     9ca:	15 96       	adiw	r26, 0x05	; 5
     9cc:	ed 91       	ld	r30, X+
     9ce:	fc 91       	ld	r31, X
     9d0:	16 97       	sbiw	r26, 0x06	; 6
     9d2:	c6 81       	ldd	r28, Z+6	; 0x06
     9d4:	d7 81       	ldd	r29, Z+7	; 0x07
     9d6:	ce 01       	movw	r24, r28
     9d8:	0c 96       	adiw	r24, 0x0c	; 12
     9da:	0e 94 b7 00 	call	0x16e	; 0x16e <uxListRemove>
     9de:	8e 01       	movw	r16, r28
     9e0:	0e 5f       	subi	r16, 0xFE	; 254
     9e2:	1f 4f       	sbci	r17, 0xFF	; 255
     9e4:	c8 01       	movw	r24, r16
     9e6:	0e 94 b7 00 	call	0x16e	; 0x16e <uxListRemove>
     9ea:	8e 89       	ldd	r24, Y+22	; 0x16
     9ec:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <uxTopReadyPriority>
     9f0:	98 17       	cp	r25, r24
     9f2:	10 f4       	brcc	.+4      	; 0x9f8 <xTaskResumeAll+0x60>
     9f4:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxTopReadyPriority>
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	9c 01       	movw	r18, r24
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	22 0f       	add	r18, r18
     a02:	33 1f       	adc	r19, r19
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	82 0f       	add	r24, r18
     a0a:	93 1f       	adc	r25, r19
     a0c:	b8 01       	movw	r22, r16
     a0e:	87 5c       	subi	r24, 0xC7	; 199
     a10:	98 4f       	sbci	r25, 0xF8	; 248
     a12:	0e 94 65 00 	call	0xca	; 0xca <vListInsertEnd>
     a16:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxCurrentTCB>
     a1a:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
     a1e:	9e 89       	ldd	r25, Y+22	; 0x16
     a20:	86 89       	ldd	r24, Z+22	; 0x16
     a22:	98 17       	cp	r25, r24
     a24:	68 f0       	brcs	.+26     	; 0xa40 <xTaskResumeAll+0xa8>
     a26:	d0 92 09 07 	sts	0x0709, r13	; 0x800709 <xYieldPending>
     a2a:	0a c0       	rjmp	.+20     	; 0xa40 <xTaskResumeAll+0xa8>
     a2c:	c0 e0       	ldi	r28, 0x00	; 0
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
     a30:	0f 2e       	mov	r0, r31
     a32:	fa e1       	ldi	r31, 0x1A	; 26
     a34:	ef 2e       	mov	r14, r31
     a36:	f7 e0       	ldi	r31, 0x07	; 7
     a38:	ff 2e       	mov	r15, r31
     a3a:	f0 2d       	mov	r31, r0
     a3c:	dd 24       	eor	r13, r13
     a3e:	d3 94       	inc	r13
     a40:	f7 01       	movw	r30, r14
     a42:	80 81       	ld	r24, Z
     a44:	81 11       	cpse	r24, r1
     a46:	c0 cf       	rjmp	.-128    	; 0x9c8 <xTaskResumeAll+0x30>
     a48:	cd 2b       	or	r28, r29
     a4a:	11 f0       	breq	.+4      	; 0xa50 <xTaskResumeAll+0xb8>
     a4c:	0e 94 76 02 	call	0x4ec	; 0x4ec <prvResetNextTaskUnblockTime>
     a50:	c0 91 0a 07 	lds	r28, 0x070A	; 0x80070a <uxPendedTicks>
     a54:	cc 23       	and	r28, r28
     a56:	51 f0       	breq	.+20     	; 0xa6c <xTaskResumeAll+0xd4>
     a58:	d1 e0       	ldi	r29, 0x01	; 1
     a5a:	0e 94 11 04 	call	0x822	; 0x822 <xTaskIncrementTick>
     a5e:	81 11       	cpse	r24, r1
     a60:	d0 93 09 07 	sts	0x0709, r29	; 0x800709 <xYieldPending>
     a64:	c1 50       	subi	r28, 0x01	; 1
     a66:	c9 f7       	brne	.-14     	; 0xa5a <xTaskResumeAll+0xc2>
     a68:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <uxPendedTicks>
     a6c:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <xYieldPending>
     a70:	88 23       	and	r24, r24
     a72:	31 f0       	breq	.+12     	; 0xa80 <xTaskResumeAll+0xe8>
     a74:	0e 94 bf 01 	call	0x37e	; 0x37e <vPortYield>
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	03 c0       	rjmp	.+6      	; 0xa82 <xTaskResumeAll+0xea>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <xTaskResumeAll+0xea>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	08 95       	ret

00000a96 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
     a9c:	89 2b       	or	r24, r25
     a9e:	51 f0       	breq	.+20     	; 0xab4 <vTaskDelay+0x1e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
     aa0:	0e 94 0b 04 	call	0x816	; 0x816 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	ce 01       	movw	r24, r28
     aa8:	0e 94 95 02 	call	0x52a	; 0x52a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     aac:	0e 94 cc 04 	call	0x998	; 0x998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     ab0:	81 11       	cpse	r24, r1
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <vTaskDelay+0x22>
		{
			portYIELD_WITHIN_API();
     ab4:	0e 94 bf 01 	call	0x37e	; 0x37e <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <prvIdleTask>:
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     abe:	01 e1       	ldi	r16, 0x11	; 17
     ac0:	17 e0       	ldi	r17, 0x07	; 7

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
     ac2:	0f 2e       	mov	r0, r31
     ac4:	f9 e3       	ldi	r31, 0x39	; 57
     ac6:	ef 2e       	mov	r14, r31
     ac8:	f7 e0       	ldi	r31, 0x07	; 7
     aca:	ff 2e       	mov	r15, r31
     acc:	f0 2d       	mov	r31, r0
     ace:	29 c0       	rjmp	.+82     	; 0xb22 <prvIdleTask+0x64>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
     ad0:	0e 94 0b 04 	call	0x816	; 0x816 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     ad4:	d8 01       	movw	r26, r16
     ad6:	cc 91       	ld	r28, X
			}
			( void ) xTaskResumeAll();
     ad8:	0e 94 cc 04 	call	0x998	; 0x998 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
     adc:	cc 23       	and	r28, r28
     ade:	09 f1       	breq	.+66     	; 0xb22 <prvIdleTask+0x64>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
     ae6:	d8 01       	movw	r26, r16
     ae8:	15 96       	adiw	r26, 0x05	; 5
     aea:	ed 91       	ld	r30, X+
     aec:	fc 91       	ld	r31, X
     aee:	16 97       	sbiw	r26, 0x06	; 6
     af0:	c6 81       	ldd	r28, Z+6	; 0x06
     af2:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     af4:	ce 01       	movw	r24, r28
     af6:	02 96       	adiw	r24, 0x02	; 2
     af8:	0e 94 b7 00 	call	0x16e	; 0x16e <uxListRemove>
					--uxCurrentNumberOfTasks;
     afc:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxCurrentNumberOfTasks>
     b00:	81 50       	subi	r24, 0x01	; 1
     b02:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <uxCurrentNumberOfTasks>
					--uxDeletedTasksWaitingCleanUp;
     b06:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxDeletedTasksWaitingCleanUp>
     b0a:	81 50       	subi	r24, 0x01	; 1
     b0c:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxDeletedTasksWaitingCleanUp>
				}
				taskEXIT_CRITICAL();
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
     b14:	8f 89       	ldd	r24, Y+23	; 0x17
     b16:	98 8d       	ldd	r25, Y+24	; 0x18
     b18:	0e 94 12 01 	call	0x224	; 0x224 <vPortFree>
			vPortFree( pxTCB );
     b1c:	ce 01       	movw	r24, r28
     b1e:	0e 94 12 01 	call	0x224	; 0x224 <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     b22:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxDeletedTasksWaitingCleanUp>
     b26:	81 11       	cpse	r24, r1
     b28:	d3 cf       	rjmp	.-90     	; 0xad0 <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
     b2a:	f7 01       	movw	r30, r14
     b2c:	80 81       	ld	r24, Z
     b2e:	82 30       	cpi	r24, 0x02	; 2
     b30:	10 f0       	brcs	.+4      	; 0xb36 <prvIdleTask+0x78>
			{
				taskYIELD();
     b32:	0e 94 bf 01 	call	0x37e	; 0x37e <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
     b36:	0e 94 04 06 	call	0xc08	; 0xc08 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
     b3a:	f3 cf       	rjmp	.-26     	; 0xb22 <prvIdleTask+0x64>

00000b3c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     b3c:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxSchedulerSuspended>
     b40:	88 23       	and	r24, r24
     b42:	21 f0       	breq	.+8      	; 0xb4c <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <xYieldPending>
     b4a:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
     b4c:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
     b50:	20 91 0c 07 	lds	r18, 0x070C	; 0x80070c <uxTopReadyPriority>
     b54:	82 2f       	mov	r24, r18
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	fc 01       	movw	r30, r24
     b5a:	ee 0f       	add	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	ee 0f       	add	r30, r30
     b64:	ff 1f       	adc	r31, r31
     b66:	e8 0f       	add	r30, r24
     b68:	f9 1f       	adc	r31, r25
     b6a:	e7 5c       	subi	r30, 0xC7	; 199
     b6c:	f8 4f       	sbci	r31, 0xF8	; 248
     b6e:	30 81       	ld	r19, Z
     b70:	31 11       	cpse	r19, r1
     b72:	11 c0       	rjmp	.+34     	; 0xb96 <vTaskSwitchContext+0x5a>
     b74:	21 50       	subi	r18, 0x01	; 1
     b76:	82 2f       	mov	r24, r18
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	fc 01       	movw	r30, r24
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	e8 0f       	add	r30, r24
     b8a:	f9 1f       	adc	r31, r25
     b8c:	e7 5c       	subi	r30, 0xC7	; 199
     b8e:	f8 4f       	sbci	r31, 0xF8	; 248
     b90:	30 81       	ld	r19, Z
     b92:	33 23       	and	r19, r19
     b94:	79 f3       	breq	.-34     	; 0xb74 <vTaskSwitchContext+0x38>
     b96:	ac 01       	movw	r20, r24
     b98:	44 0f       	add	r20, r20
     b9a:	55 1f       	adc	r21, r21
     b9c:	44 0f       	add	r20, r20
     b9e:	55 1f       	adc	r21, r21
     ba0:	44 0f       	add	r20, r20
     ba2:	55 1f       	adc	r21, r21
     ba4:	48 0f       	add	r20, r24
     ba6:	59 1f       	adc	r21, r25
     ba8:	da 01       	movw	r26, r20
     baa:	a7 5c       	subi	r26, 0xC7	; 199
     bac:	b8 4f       	sbci	r27, 0xF8	; 248
     bae:	11 96       	adiw	r26, 0x01	; 1
     bb0:	ed 91       	ld	r30, X+
     bb2:	fc 91       	ld	r31, X
     bb4:	12 97       	sbiw	r26, 0x02	; 2
     bb6:	02 80       	ldd	r0, Z+2	; 0x02
     bb8:	f3 81       	ldd	r31, Z+3	; 0x03
     bba:	e0 2d       	mov	r30, r0
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	fc 93       	st	X, r31
     bc0:	ee 93       	st	-X, r30
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	44 5c       	subi	r20, 0xC4	; 196
     bc6:	58 4f       	sbci	r21, 0xF8	; 248
     bc8:	e4 17       	cp	r30, r20
     bca:	f5 07       	cpc	r31, r21
     bcc:	29 f4       	brne	.+10     	; 0xbd8 <vTaskSwitchContext+0x9c>
     bce:	42 81       	ldd	r20, Z+2	; 0x02
     bd0:	53 81       	ldd	r21, Z+3	; 0x03
     bd2:	fd 01       	movw	r30, r26
     bd4:	52 83       	std	Z+2, r21	; 0x02
     bd6:	41 83       	std	Z+1, r20	; 0x01
     bd8:	fc 01       	movw	r30, r24
     bda:	ee 0f       	add	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	8e 0f       	add	r24, r30
     be8:	9f 1f       	adc	r25, r31
     bea:	fc 01       	movw	r30, r24
     bec:	e7 5c       	subi	r30, 0xC7	; 199
     bee:	f8 4f       	sbci	r31, 0xF8	; 248
     bf0:	01 80       	ldd	r0, Z+1	; 0x01
     bf2:	f2 81       	ldd	r31, Z+2	; 0x02
     bf4:	e0 2d       	mov	r30, r0
     bf6:	86 81       	ldd	r24, Z+6	; 0x06
     bf8:	97 81       	ldd	r25, Z+7	; 0x07
     bfa:	90 93 5e 07 	sts	0x075E, r25	; 0x80075e <pxCurrentTCB+0x1>
     bfe:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <pxCurrentTCB>
     c02:	20 93 0c 07 	sts	0x070C, r18	; 0x80070c <uxTopReadyPriority>
     c06:	08 95       	ret

00000c08 <vApplicationIdleHook>:
}

void clearRxBuffer(void){
	rxWritePos = 0;
	rxReadPos = 0;
	serialAvailable = 0;
     c08:	08 95       	ret

00000c0a <__vector_16>:
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	2f 93       	push	r18
     c16:	3f 93       	push	r19
     c18:	4f 93       	push	r20
     c1a:	5f 93       	push	r21
     c1c:	6f 93       	push	r22
     c1e:	7f 93       	push	r23
     c20:	8f 93       	push	r24
     c22:	9f 93       	push	r25
     c24:	af 93       	push	r26
     c26:	bf 93       	push	r27
     c28:	ef 93       	push	r30
     c2a:	ff 93       	push	r31
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	48 ec       	ldi	r20, 0xC8	; 200
     c32:	52 e4       	ldi	r21, 0x42	; 66
     c34:	60 91 62 07 	lds	r22, 0x0762	; 0x800762 <dutyCycle>
     c38:	70 91 63 07 	lds	r23, 0x0763	; 0x800763 <dutyCycle+0x1>
     c3c:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <dutyCycle+0x2>
     c40:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <dutyCycle+0x3>
     c44:	0e 94 96 07 	call	0xf2c	; 0xf2c <__divsf3>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	4f e7       	ldi	r20, 0x7F	; 127
     c4e:	53 e4       	ldi	r21, 0x43	; 67
     c50:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3>
     c54:	0e 94 08 08 	call	0x1010	; 0x1010 <__fixunssfsi>
     c58:	67 bd       	out	0x27, r22	; 39
     c5a:	ff 91       	pop	r31
     c5c:	ef 91       	pop	r30
     c5e:	bf 91       	pop	r27
     c60:	af 91       	pop	r26
     c62:	9f 91       	pop	r25
     c64:	8f 91       	pop	r24
     c66:	7f 91       	pop	r23
     c68:	6f 91       	pop	r22
     c6a:	5f 91       	pop	r21
     c6c:	4f 91       	pop	r20
     c6e:	3f 91       	pop	r19
     c70:	2f 91       	pop	r18
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <__vector_18>:
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31
     c8e:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <rxWritePos>
     c92:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c96:	e8 2f       	mov	r30, r24
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	e6 59       	subi	r30, 0x96	; 150
     c9c:	f8 4f       	sbci	r31, 0xF8	; 248
     c9e:	90 83       	st	Z, r25
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	1a f0       	brmi	.+6      	; 0xcaa <__vector_18+0x2e>
     ca4:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <rxWritePos>
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <__vector_18+0x32>
     caa:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <rxWritePos>
     cae:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <serialAvailable>
     cb2:	81 38       	cpi	r24, 0x81	; 129
     cb4:	18 f4       	brcc	.+6      	; 0xcbc <__vector_18+0x40>
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <serialAvailable>
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <setupDigitalPins>:
     cce:	20 98       	cbi	0x04, 0	; 4
     cd0:	57 98       	cbi	0x0a, 7	; 10
     cd2:	28 98       	cbi	0x05, 0	; 5
     cd4:	5f 98       	cbi	0x0b, 7	; 11
     cd6:	08 95       	ret

00000cd8 <setupFastPwm>:
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	8a b9       	out	0x0a, r24	; 10
     cdc:	83 e8       	ldi	r24, 0x83	; 131
     cde:	84 bd       	out	0x24, r24	; 36
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	48 ec       	ldi	r20, 0xC8	; 200
     cec:	52 e4       	ldi	r21, 0x42	; 66
     cee:	60 91 62 07 	lds	r22, 0x0762	; 0x800762 <dutyCycle>
     cf2:	70 91 63 07 	lds	r23, 0x0763	; 0x800763 <dutyCycle+0x1>
     cf6:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <dutyCycle+0x2>
     cfa:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <dutyCycle+0x3>
     cfe:	0e 94 96 07 	call	0xf2c	; 0xf2c <__divsf3>
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4f e7       	ldi	r20, 0x7F	; 127
     d08:	53 e4       	ldi	r21, 0x43	; 67
     d0a:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3>
     d0e:	0e 94 08 08 	call	0x1010	; 0x1010 <__fixunssfsi>
     d12:	67 bd       	out	0x27, r22	; 39
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	85 bd       	out	0x25, r24	; 37
     d18:	08 95       	ret

00000d1a <setupUART>:
     d1a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     d1e:	87 e6       	ldi	r24, 0x67	; 103
     d20:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     d24:	88 e9       	ldi	r24, 0x98	; 152
     d26:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     d2a:	86 e0       	ldi	r24, 0x06	; 6
     d2c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     d30:	08 95       	ret

00000d32 <main>:
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	0e 94 67 06 	call	0xcce	; 0xcce <setupDigitalPins>
     d3c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <setupUART>
     d40:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <setupFastPwm>
     d44:	e1 2c       	mov	r14, r1
     d46:	f1 2c       	mov	r15, r1
     d48:	05 e0       	ldi	r16, 0x05	; 5
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	69 e0       	ldi	r22, 0x09	; 9
     d54:	71 e0       	ldi	r23, 0x01	; 1
     d56:	8d e8       	ldi	r24, 0x8D	; 141
     d58:	97 e0       	ldi	r25, 0x07	; 7
     d5a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xTaskCreate>
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e8       	ldi	r20, 0x80	; 128
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	67 e1       	ldi	r22, 0x17	; 23
     d68:	71 e0       	ldi	r23, 0x01	; 1
     d6a:	8c ed       	ldi	r24, 0xDC	; 220
     d6c:	96 e0       	ldi	r25, 0x06	; 6
     d6e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xTaskCreate>
     d72:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vTaskStartScheduler>
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	08 95       	ret

00000d82 <getChar>:
     d82:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <rxReadPos>
     d86:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <rxWritePos>
     d8a:	98 17       	cp	r25, r24
     d8c:	71 f0       	breq	.+28     	; 0xdaa <getChar+0x28>
     d8e:	e9 2f       	mov	r30, r25
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	e6 59       	subi	r30, 0x96	; 150
     d94:	f8 4f       	sbci	r31, 0xF8	; 248
     d96:	80 81       	ld	r24, Z
     d98:	9f 5f       	subi	r25, 0xFF	; 255
     d9a:	90 93 61 07 	sts	0x0761, r25	; 0x800761 <rxReadPos>
     d9e:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <serialAvailable>
     da2:	91 50       	subi	r25, 0x01	; 1
     da4:	90 93 5f 07 	sts	0x075F, r25	; 0x80075f <serialAvailable>
     da8:	08 95       	ret
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	08 95       	ret

00000dae <sendBytes>:
}

void sendBytes(void){
	int8_t zero = 255;
	int8_t one = (int8_t)(rand()%255);
     dae:	0e 94 7e 09 	call	0x12fc	; 0x12fc <rand>
	int8_t two = (int8_t)(rand()%255);
     db2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <rand>
     db6:	08 95       	ret

00000db8 <handleData>:
void pause(void);
void useData(void);

void handleData(void* paramter){
	for(;;){
		sendBytes();
     db8:	0e 94 d7 06 	call	0xdae	; 0xdae <sendBytes>
		vTaskDelay(250);
     dbc:	8a ef       	ldi	r24, 0xFA	; 250
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 4b 05 	call	0xa96	; 0xa96 <vTaskDelay>
     dc4:	f9 cf       	rjmp	.-14     	; 0xdb8 <handleData>

00000dc6 <forward>:
	int8_t three = one^two;
	int8_t toSend[] = {zero, one, two, three};
}

void forward(int8_t speed){
	dutyCycle = speed;
     dc6:	68 2f       	mov	r22, r24
     dc8:	88 0f       	add	r24, r24
     dca:	77 0b       	sbc	r23, r23
     dcc:	88 0b       	sbc	r24, r24
     dce:	99 0b       	sbc	r25, r25
     dd0:	0e 94 39 08 	call	0x1072	; 0x1072 <__floatsisf>
     dd4:	60 93 62 07 	sts	0x0762, r22	; 0x800762 <dutyCycle>
     dd8:	70 93 63 07 	sts	0x0763, r23	; 0x800763 <dutyCycle+0x1>
     ddc:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <dutyCycle+0x2>
     de0:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <dutyCycle+0x3>
	PORTB &= ~(0x01 << 0);// set Pin 14 LOW
     de4:	28 98       	cbi	0x05, 0	; 5
	PORTD &= ~(0x01 << 7); // set Pin 13 LOW
     de6:	5f 98       	cbi	0x0b, 7	; 11
     de8:	08 95       	ret

00000dea <right>:
}

void right(int8_t speed){
	dutyCycle = speed;
     dea:	68 2f       	mov	r22, r24
     dec:	88 0f       	add	r24, r24
     dee:	77 0b       	sbc	r23, r23
     df0:	88 0b       	sbc	r24, r24
     df2:	99 0b       	sbc	r25, r25
     df4:	0e 94 39 08 	call	0x1072	; 0x1072 <__floatsisf>
     df8:	60 93 62 07 	sts	0x0762, r22	; 0x800762 <dutyCycle>
     dfc:	70 93 63 07 	sts	0x0763, r23	; 0x800763 <dutyCycle+0x1>
     e00:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <dutyCycle+0x2>
     e04:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <dutyCycle+0x3>
	PORTB &= ~(0x01 << 0);// set Pin 14 LOW
     e08:	28 98       	cbi	0x05, 0	; 5
	PORTD |= (0x01 << 7); // set Pin 13 HIGH
     e0a:	5f 9a       	sbi	0x0b, 7	; 11
     e0c:	08 95       	ret

00000e0e <left>:
}

void left(int8_t speed){
	dutyCycle = speed;
     e0e:	68 2f       	mov	r22, r24
     e10:	88 0f       	add	r24, r24
     e12:	77 0b       	sbc	r23, r23
     e14:	88 0b       	sbc	r24, r24
     e16:	99 0b       	sbc	r25, r25
     e18:	0e 94 39 08 	call	0x1072	; 0x1072 <__floatsisf>
     e1c:	60 93 62 07 	sts	0x0762, r22	; 0x800762 <dutyCycle>
     e20:	70 93 63 07 	sts	0x0763, r23	; 0x800763 <dutyCycle+0x1>
     e24:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <dutyCycle+0x2>
     e28:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <dutyCycle+0x3>
	PORTB |= (0x01 << 0); // set Pin 14 HIGH
     e2c:	28 9a       	sbi	0x05, 0	; 5
	PORTD &= ~(0x01 << 7); // set Pin 13 LOW
     e2e:	5f 98       	cbi	0x0b, 7	; 11
     e30:	08 95       	ret

00000e32 <backward>:
}

void backward(int8_t speed){
	dutyCycle = speed;
     e32:	68 2f       	mov	r22, r24
     e34:	88 0f       	add	r24, r24
     e36:	77 0b       	sbc	r23, r23
     e38:	88 0b       	sbc	r24, r24
     e3a:	99 0b       	sbc	r25, r25
     e3c:	0e 94 39 08 	call	0x1072	; 0x1072 <__floatsisf>
     e40:	60 93 62 07 	sts	0x0762, r22	; 0x800762 <dutyCycle>
     e44:	70 93 63 07 	sts	0x0763, r23	; 0x800763 <dutyCycle+0x1>
     e48:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <dutyCycle+0x2>
     e4c:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <dutyCycle+0x3>
	PORTB |= (0x01 << 0); // set Pin 14 HIGH
     e50:	28 9a       	sbi	0x05, 0	; 5
	PORTD |= (0x01 << 7); // set Pin 13 HIGH
     e52:	5f 9a       	sbi	0x0b, 7	; 11
     e54:	08 95       	ret

00000e56 <pause>:
}

void pause(){
	dutyCycle = 0;
     e56:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <dutyCycle>
     e5a:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <dutyCycle+0x1>
     e5e:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <dutyCycle+0x2>
     e62:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <dutyCycle+0x3>
	PORTB &= ~(0x01 << 0);// set Pin 14 LOW
     e66:	28 98       	cbi	0x05, 0	; 5
	PORTD |= (0x01 << 7); // set Pin 13 HIGH
     e68:	5f 9a       	sbi	0x0b, 7	; 11
     e6a:	08 95       	ret

00000e6c <useData>:
}

void useData(void) {
	if (newData == true) {
     e6c:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <newData>
     e70:	88 23       	and	r24, r24
     e72:	39 f1       	breq	.+78     	; 0xec2 <useData+0x56>
		if( (receivedBytes[0]^receivedBytes[1]) == receivedBytes[2]){
     e74:	e7 e6       	ldi	r30, 0x67	; 103
     e76:	f7 e0       	ldi	r31, 0x07	; 7
     e78:	90 81       	ld	r25, Z
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	39 2f       	mov	r19, r25
     e7e:	38 27       	eor	r19, r24
     e80:	22 81       	ldd	r18, Z+2	; 0x02
     e82:	32 13       	cpse	r19, r18
     e84:	1a c0       	rjmp	.+52     	; 0xeba <useData+0x4e>
			switch (receivedBytes[0]) {
     e86:	92 30       	cpi	r25, 0x02	; 2
     e88:	61 f0       	breq	.+24     	; 0xea2 <useData+0x36>
     e8a:	1c f4       	brge	.+6      	; 0xe92 <useData+0x26>
     e8c:	91 30       	cpi	r25, 0x01	; 1
     e8e:	31 f0       	breq	.+12     	; 0xe9c <useData+0x30>
     e90:	11 c0       	rjmp	.+34     	; 0xeb4 <useData+0x48>
     e92:	93 30       	cpi	r25, 0x03	; 3
     e94:	49 f0       	breq	.+18     	; 0xea8 <useData+0x3c>
     e96:	94 30       	cpi	r25, 0x04	; 4
     e98:	51 f0       	breq	.+20     	; 0xeae <useData+0x42>
     e9a:	0c c0       	rjmp	.+24     	; 0xeb4 <useData+0x48>
				case 1:
				forward(receivedBytes[1]);
     e9c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <forward>
				break;
     ea0:	0e c0       	rjmp	.+28     	; 0xebe <useData+0x52>
				case 2:
				right(receivedBytes[1]);
     ea2:	0e 94 f5 06 	call	0xdea	; 0xdea <right>
				break;
     ea6:	0b c0       	rjmp	.+22     	; 0xebe <useData+0x52>
				case 3:
				backward(receivedBytes[1]);
     ea8:	0e 94 19 07 	call	0xe32	; 0xe32 <backward>
				break;
     eac:	08 c0       	rjmp	.+16     	; 0xebe <useData+0x52>
				case 4:
				left(receivedBytes[1]);
     eae:	0e 94 07 07 	call	0xe0e	; 0xe0e <left>
				break;
     eb2:	05 c0       	rjmp	.+10     	; 0xebe <useData+0x52>
				default:
				pause();
     eb4:	0e 94 2b 07 	call	0xe56	; 0xe56 <pause>
				break;
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <useData+0x52>
			}
		}
		else{
			pause();
     eba:	0e 94 2b 07 	call	0xe56	; 0xe56 <pause>
		}
		newData = false;
     ebe:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <newData>
     ec2:	08 95       	ret

00000ec4 <recvBytes>:
	}
}

void recvBytes(void) {
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
	bool recvInProgress = false;
	uint8_t ndx = 0;
     ecc:	c0 e0       	ldi	r28, 0x00	; 0
		newData = false;
	}
}

void recvBytes(void) {
	bool recvInProgress = false;
     ece:	d0 e0       	ldi	r29, 0x00	; 0
				receivedBytes[ndx] = rb;
				ndx++;
				if(ndx == NUMBYTES){
					recvInProgress = false;
					ndx = 0;
					newData = true;
     ed0:	11 e0       	ldi	r17, 0x01	; 1
		if (recvInProgress == true) {
			if (ndx < NUMBYTES) {
				receivedBytes[ndx] = rb;
				ndx++;
				if(ndx == NUMBYTES){
					recvInProgress = false;
     ed2:	00 e0       	ldi	r16, 0x00	; 0
	bool recvInProgress = false;
	uint8_t ndx = 0;
	char startMarker = 255;
	char rb;
	
	while (serialAvailable > 0 && newData == false) {
     ed4:	15 c0       	rjmp	.+42     	; 0xf00 <recvBytes+0x3c>
		rb = getChar();
     ed6:	0e 94 c1 06 	call	0xd82	; 0xd82 <getChar>
		if (recvInProgress == true) {
     eda:	dd 23       	and	r29, r29
     edc:	71 f0       	breq	.+28     	; 0xefa <recvBytes+0x36>
			if (ndx < NUMBYTES) {
     ede:	c3 30       	cpi	r28, 0x03	; 3
     ee0:	60 f4       	brcc	.+24     	; 0xefa <recvBytes+0x36>
				receivedBytes[ndx] = rb;
     ee2:	ec 2f       	mov	r30, r28
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	e9 59       	subi	r30, 0x99	; 153
     ee8:	f8 4f       	sbci	r31, 0xF8	; 248
     eea:	80 83       	st	Z, r24
				ndx++;
     eec:	cf 5f       	subi	r28, 0xFF	; 255
				if(ndx == NUMBYTES){
     eee:	c3 30       	cpi	r28, 0x03	; 3
     ef0:	21 f4       	brne	.+8      	; 0xefa <recvBytes+0x36>
					recvInProgress = false;
					ndx = 0;
					newData = true;
     ef2:	10 93 66 07 	sts	0x0766, r17	; 0x800766 <newData>
			if (ndx < NUMBYTES) {
				receivedBytes[ndx] = rb;
				ndx++;
				if(ndx == NUMBYTES){
					recvInProgress = false;
					ndx = 0;
     ef6:	c0 e0       	ldi	r28, 0x00	; 0
		if (recvInProgress == true) {
			if (ndx < NUMBYTES) {
				receivedBytes[ndx] = rb;
				ndx++;
				if(ndx == NUMBYTES){
					recvInProgress = false;
     ef8:	d0 2f       	mov	r29, r16
					ndx = 0;
					newData = true;
				}
			}
		}
		if (rb == startMarker) {
     efa:	8f 3f       	cpi	r24, 0xFF	; 255
     efc:	09 f4       	brne	.+2      	; 0xf00 <recvBytes+0x3c>
			recvInProgress = true;
     efe:	d1 2f       	mov	r29, r17
	bool recvInProgress = false;
	uint8_t ndx = 0;
	char startMarker = 255;
	char rb;
	
	while (serialAvailable > 0 && newData == false) {
     f00:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <serialAvailable>
     f04:	88 23       	and	r24, r24
     f06:	21 f0       	breq	.+8      	; 0xf10 <recvBytes+0x4c>
     f08:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <newData>
     f0c:	88 23       	and	r24, r24
     f0e:	19 f3       	breq	.-58     	; 0xed6 <recvBytes+0x12>
		}
		if (rb == startMarker) {
			recvInProgress = true;
		}
	}
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	08 95       	ret

00000f1a <controlMotors>:
	}
}

void controlMotors(void* paramter){
	for(;;){
		recvBytes();
     f1a:	0e 94 62 07 	call	0xec4	; 0xec4 <recvBytes>
		useData();
     f1e:	0e 94 36 07 	call	0xe6c	; 0xe6c <useData>
		vTaskDelay(100);
     f22:	84 e6       	ldi	r24, 0x64	; 100
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 4b 05 	call	0xa96	; 0xa96 <vTaskDelay>
     f2a:	f7 cf       	rjmp	.-18     	; 0xf1a <controlMotors>

00000f2c <__divsf3>:
     f2c:	0e 94 aa 07 	call	0xf54	; 0xf54 <__divsf3x>
     f30:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__fp_round>
     f34:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_pscB>
     f38:	58 f0       	brcs	.+22     	; 0xf50 <__divsf3+0x24>
     f3a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_pscA>
     f3e:	40 f0       	brcs	.+16     	; 0xf50 <__divsf3+0x24>
     f40:	29 f4       	brne	.+10     	; 0xf4c <__divsf3+0x20>
     f42:	5f 3f       	cpi	r21, 0xFF	; 255
     f44:	29 f0       	breq	.+10     	; 0xf50 <__divsf3+0x24>
     f46:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_inf>
     f4a:	51 11       	cpse	r21, r1
     f4c:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_szero>
     f50:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_nan>

00000f54 <__divsf3x>:
     f54:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_split3>
     f58:	68 f3       	brcs	.-38     	; 0xf34 <__divsf3+0x8>

00000f5a <__divsf3_pse>:
     f5a:	99 23       	and	r25, r25
     f5c:	b1 f3       	breq	.-20     	; 0xf4a <__divsf3+0x1e>
     f5e:	55 23       	and	r21, r21
     f60:	91 f3       	breq	.-28     	; 0xf46 <__divsf3+0x1a>
     f62:	95 1b       	sub	r25, r21
     f64:	55 0b       	sbc	r21, r21
     f66:	bb 27       	eor	r27, r27
     f68:	aa 27       	eor	r26, r26
     f6a:	62 17       	cp	r22, r18
     f6c:	73 07       	cpc	r23, r19
     f6e:	84 07       	cpc	r24, r20
     f70:	38 f0       	brcs	.+14     	; 0xf80 <__divsf3_pse+0x26>
     f72:	9f 5f       	subi	r25, 0xFF	; 255
     f74:	5f 4f       	sbci	r21, 0xFF	; 255
     f76:	22 0f       	add	r18, r18
     f78:	33 1f       	adc	r19, r19
     f7a:	44 1f       	adc	r20, r20
     f7c:	aa 1f       	adc	r26, r26
     f7e:	a9 f3       	breq	.-22     	; 0xf6a <__divsf3_pse+0x10>
     f80:	35 d0       	rcall	.+106    	; 0xfec <__divsf3_pse+0x92>
     f82:	0e 2e       	mov	r0, r30
     f84:	3a f0       	brmi	.+14     	; 0xf94 <__divsf3_pse+0x3a>
     f86:	e0 e8       	ldi	r30, 0x80	; 128
     f88:	32 d0       	rcall	.+100    	; 0xfee <__divsf3_pse+0x94>
     f8a:	91 50       	subi	r25, 0x01	; 1
     f8c:	50 40       	sbci	r21, 0x00	; 0
     f8e:	e6 95       	lsr	r30
     f90:	00 1c       	adc	r0, r0
     f92:	ca f7       	brpl	.-14     	; 0xf86 <__divsf3_pse+0x2c>
     f94:	2b d0       	rcall	.+86     	; 0xfec <__divsf3_pse+0x92>
     f96:	fe 2f       	mov	r31, r30
     f98:	29 d0       	rcall	.+82     	; 0xfec <__divsf3_pse+0x92>
     f9a:	66 0f       	add	r22, r22
     f9c:	77 1f       	adc	r23, r23
     f9e:	88 1f       	adc	r24, r24
     fa0:	bb 1f       	adc	r27, r27
     fa2:	26 17       	cp	r18, r22
     fa4:	37 07       	cpc	r19, r23
     fa6:	48 07       	cpc	r20, r24
     fa8:	ab 07       	cpc	r26, r27
     faa:	b0 e8       	ldi	r27, 0x80	; 128
     fac:	09 f0       	breq	.+2      	; 0xfb0 <__divsf3_pse+0x56>
     fae:	bb 0b       	sbc	r27, r27
     fb0:	80 2d       	mov	r24, r0
     fb2:	bf 01       	movw	r22, r30
     fb4:	ff 27       	eor	r31, r31
     fb6:	93 58       	subi	r25, 0x83	; 131
     fb8:	5f 4f       	sbci	r21, 0xFF	; 255
     fba:	3a f0       	brmi	.+14     	; 0xfca <__divsf3_pse+0x70>
     fbc:	9e 3f       	cpi	r25, 0xFE	; 254
     fbe:	51 05       	cpc	r21, r1
     fc0:	78 f0       	brcs	.+30     	; 0xfe0 <__divsf3_pse+0x86>
     fc2:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_inf>
     fc6:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_szero>
     fca:	5f 3f       	cpi	r21, 0xFF	; 255
     fcc:	e4 f3       	brlt	.-8      	; 0xfc6 <__divsf3_pse+0x6c>
     fce:	98 3e       	cpi	r25, 0xE8	; 232
     fd0:	d4 f3       	brlt	.-12     	; 0xfc6 <__divsf3_pse+0x6c>
     fd2:	86 95       	lsr	r24
     fd4:	77 95       	ror	r23
     fd6:	67 95       	ror	r22
     fd8:	b7 95       	ror	r27
     fda:	f7 95       	ror	r31
     fdc:	9f 5f       	subi	r25, 0xFF	; 255
     fde:	c9 f7       	brne	.-14     	; 0xfd2 <__divsf3_pse+0x78>
     fe0:	88 0f       	add	r24, r24
     fe2:	91 1d       	adc	r25, r1
     fe4:	96 95       	lsr	r25
     fe6:	87 95       	ror	r24
     fe8:	97 f9       	bld	r25, 7
     fea:	08 95       	ret
     fec:	e1 e0       	ldi	r30, 0x01	; 1
     fee:	66 0f       	add	r22, r22
     ff0:	77 1f       	adc	r23, r23
     ff2:	88 1f       	adc	r24, r24
     ff4:	bb 1f       	adc	r27, r27
     ff6:	62 17       	cp	r22, r18
     ff8:	73 07       	cpc	r23, r19
     ffa:	84 07       	cpc	r24, r20
     ffc:	ba 07       	cpc	r27, r26
     ffe:	20 f0       	brcs	.+8      	; 0x1008 <__divsf3_pse+0xae>
    1000:	62 1b       	sub	r22, r18
    1002:	73 0b       	sbc	r23, r19
    1004:	84 0b       	sbc	r24, r20
    1006:	ba 0b       	sbc	r27, r26
    1008:	ee 1f       	adc	r30, r30
    100a:	88 f7       	brcc	.-30     	; 0xfee <__divsf3_pse+0x94>
    100c:	e0 95       	com	r30
    100e:	08 95       	ret

00001010 <__fixunssfsi>:
    1010:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fp_splitA>
    1014:	88 f0       	brcs	.+34     	; 0x1038 <__fixunssfsi+0x28>
    1016:	9f 57       	subi	r25, 0x7F	; 127
    1018:	98 f0       	brcs	.+38     	; 0x1040 <__fixunssfsi+0x30>
    101a:	b9 2f       	mov	r27, r25
    101c:	99 27       	eor	r25, r25
    101e:	b7 51       	subi	r27, 0x17	; 23
    1020:	b0 f0       	brcs	.+44     	; 0x104e <__fixunssfsi+0x3e>
    1022:	e1 f0       	breq	.+56     	; 0x105c <__fixunssfsi+0x4c>
    1024:	66 0f       	add	r22, r22
    1026:	77 1f       	adc	r23, r23
    1028:	88 1f       	adc	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	1a f0       	brmi	.+6      	; 0x1034 <__fixunssfsi+0x24>
    102e:	ba 95       	dec	r27
    1030:	c9 f7       	brne	.-14     	; 0x1024 <__fixunssfsi+0x14>
    1032:	14 c0       	rjmp	.+40     	; 0x105c <__fixunssfsi+0x4c>
    1034:	b1 30       	cpi	r27, 0x01	; 1
    1036:	91 f0       	breq	.+36     	; 0x105c <__fixunssfsi+0x4c>
    1038:	0e 94 be 08 	call	0x117c	; 0x117c <__fp_zero>
    103c:	b1 e0       	ldi	r27, 0x01	; 1
    103e:	08 95       	ret
    1040:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_zero>
    1044:	67 2f       	mov	r22, r23
    1046:	78 2f       	mov	r23, r24
    1048:	88 27       	eor	r24, r24
    104a:	b8 5f       	subi	r27, 0xF8	; 248
    104c:	39 f0       	breq	.+14     	; 0x105c <__fixunssfsi+0x4c>
    104e:	b9 3f       	cpi	r27, 0xF9	; 249
    1050:	cc f3       	brlt	.-14     	; 0x1044 <__fixunssfsi+0x34>
    1052:	86 95       	lsr	r24
    1054:	77 95       	ror	r23
    1056:	67 95       	ror	r22
    1058:	b3 95       	inc	r27
    105a:	d9 f7       	brne	.-10     	; 0x1052 <__fixunssfsi+0x42>
    105c:	3e f4       	brtc	.+14     	; 0x106c <__fixunssfsi+0x5c>
    105e:	90 95       	com	r25
    1060:	80 95       	com	r24
    1062:	70 95       	com	r23
    1064:	61 95       	neg	r22
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	08 95       	ret

0000106e <__floatunsisf>:
    106e:	e8 94       	clt
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <__floatsisf+0x12>

00001072 <__floatsisf>:
    1072:	97 fb       	bst	r25, 7
    1074:	3e f4       	brtc	.+14     	; 0x1084 <__floatsisf+0x12>
    1076:	90 95       	com	r25
    1078:	80 95       	com	r24
    107a:	70 95       	com	r23
    107c:	61 95       	neg	r22
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	8f 4f       	sbci	r24, 0xFF	; 255
    1082:	9f 4f       	sbci	r25, 0xFF	; 255
    1084:	99 23       	and	r25, r25
    1086:	a9 f0       	breq	.+42     	; 0x10b2 <__floatsisf+0x40>
    1088:	f9 2f       	mov	r31, r25
    108a:	96 e9       	ldi	r25, 0x96	; 150
    108c:	bb 27       	eor	r27, r27
    108e:	93 95       	inc	r25
    1090:	f6 95       	lsr	r31
    1092:	87 95       	ror	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	b7 95       	ror	r27
    109a:	f1 11       	cpse	r31, r1
    109c:	f8 cf       	rjmp	.-16     	; 0x108e <__floatsisf+0x1c>
    109e:	fa f4       	brpl	.+62     	; 0x10de <__floatsisf+0x6c>
    10a0:	bb 0f       	add	r27, r27
    10a2:	11 f4       	brne	.+4      	; 0x10a8 <__floatsisf+0x36>
    10a4:	60 ff       	sbrs	r22, 0
    10a6:	1b c0       	rjmp	.+54     	; 0x10de <__floatsisf+0x6c>
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	8f 4f       	sbci	r24, 0xFF	; 255
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	16 c0       	rjmp	.+44     	; 0x10de <__floatsisf+0x6c>
    10b2:	88 23       	and	r24, r24
    10b4:	11 f0       	breq	.+4      	; 0x10ba <__floatsisf+0x48>
    10b6:	96 e9       	ldi	r25, 0x96	; 150
    10b8:	11 c0       	rjmp	.+34     	; 0x10dc <__floatsisf+0x6a>
    10ba:	77 23       	and	r23, r23
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <__floatsisf+0x54>
    10be:	9e e8       	ldi	r25, 0x8E	; 142
    10c0:	87 2f       	mov	r24, r23
    10c2:	76 2f       	mov	r23, r22
    10c4:	05 c0       	rjmp	.+10     	; 0x10d0 <__floatsisf+0x5e>
    10c6:	66 23       	and	r22, r22
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <__floatsisf+0x74>
    10ca:	96 e8       	ldi	r25, 0x86	; 134
    10cc:	86 2f       	mov	r24, r22
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	2a f0       	brmi	.+10     	; 0x10de <__floatsisf+0x6c>
    10d4:	9a 95       	dec	r25
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	88 1f       	adc	r24, r24
    10dc:	da f7       	brpl	.-10     	; 0x10d4 <__floatsisf+0x62>
    10de:	88 0f       	add	r24, r24
    10e0:	96 95       	lsr	r25
    10e2:	87 95       	ror	r24
    10e4:	97 f9       	bld	r25, 7
    10e6:	08 95       	ret

000010e8 <__fp_inf>:
    10e8:	97 f9       	bld	r25, 7
    10ea:	9f 67       	ori	r25, 0x7F	; 127
    10ec:	80 e8       	ldi	r24, 0x80	; 128
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	08 95       	ret

000010f4 <__fp_nan>:
    10f4:	9f ef       	ldi	r25, 0xFF	; 255
    10f6:	80 ec       	ldi	r24, 0xC0	; 192
    10f8:	08 95       	ret

000010fa <__fp_pscA>:
    10fa:	00 24       	eor	r0, r0
    10fc:	0a 94       	dec	r0
    10fe:	16 16       	cp	r1, r22
    1100:	17 06       	cpc	r1, r23
    1102:	18 06       	cpc	r1, r24
    1104:	09 06       	cpc	r0, r25
    1106:	08 95       	ret

00001108 <__fp_pscB>:
    1108:	00 24       	eor	r0, r0
    110a:	0a 94       	dec	r0
    110c:	12 16       	cp	r1, r18
    110e:	13 06       	cpc	r1, r19
    1110:	14 06       	cpc	r1, r20
    1112:	05 06       	cpc	r0, r21
    1114:	08 95       	ret

00001116 <__fp_round>:
    1116:	09 2e       	mov	r0, r25
    1118:	03 94       	inc	r0
    111a:	00 0c       	add	r0, r0
    111c:	11 f4       	brne	.+4      	; 0x1122 <__fp_round+0xc>
    111e:	88 23       	and	r24, r24
    1120:	52 f0       	brmi	.+20     	; 0x1136 <__fp_round+0x20>
    1122:	bb 0f       	add	r27, r27
    1124:	40 f4       	brcc	.+16     	; 0x1136 <__fp_round+0x20>
    1126:	bf 2b       	or	r27, r31
    1128:	11 f4       	brne	.+4      	; 0x112e <__fp_round+0x18>
    112a:	60 ff       	sbrs	r22, 0
    112c:	04 c0       	rjmp	.+8      	; 0x1136 <__fp_round+0x20>
    112e:	6f 5f       	subi	r22, 0xFF	; 255
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	8f 4f       	sbci	r24, 0xFF	; 255
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	08 95       	ret

00001138 <__fp_split3>:
    1138:	57 fd       	sbrc	r21, 7
    113a:	90 58       	subi	r25, 0x80	; 128
    113c:	44 0f       	add	r20, r20
    113e:	55 1f       	adc	r21, r21
    1140:	59 f0       	breq	.+22     	; 0x1158 <__fp_splitA+0x10>
    1142:	5f 3f       	cpi	r21, 0xFF	; 255
    1144:	71 f0       	breq	.+28     	; 0x1162 <__fp_splitA+0x1a>
    1146:	47 95       	ror	r20

00001148 <__fp_splitA>:
    1148:	88 0f       	add	r24, r24
    114a:	97 fb       	bst	r25, 7
    114c:	99 1f       	adc	r25, r25
    114e:	61 f0       	breq	.+24     	; 0x1168 <__fp_splitA+0x20>
    1150:	9f 3f       	cpi	r25, 0xFF	; 255
    1152:	79 f0       	breq	.+30     	; 0x1172 <__fp_splitA+0x2a>
    1154:	87 95       	ror	r24
    1156:	08 95       	ret
    1158:	12 16       	cp	r1, r18
    115a:	13 06       	cpc	r1, r19
    115c:	14 06       	cpc	r1, r20
    115e:	55 1f       	adc	r21, r21
    1160:	f2 cf       	rjmp	.-28     	; 0x1146 <__fp_split3+0xe>
    1162:	46 95       	lsr	r20
    1164:	f1 df       	rcall	.-30     	; 0x1148 <__fp_splitA>
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <__fp_splitA+0x30>
    1168:	16 16       	cp	r1, r22
    116a:	17 06       	cpc	r1, r23
    116c:	18 06       	cpc	r1, r24
    116e:	99 1f       	adc	r25, r25
    1170:	f1 cf       	rjmp	.-30     	; 0x1154 <__fp_splitA+0xc>
    1172:	86 95       	lsr	r24
    1174:	71 05       	cpc	r23, r1
    1176:	61 05       	cpc	r22, r1
    1178:	08 94       	sec
    117a:	08 95       	ret

0000117c <__fp_zero>:
    117c:	e8 94       	clt

0000117e <__fp_szero>:
    117e:	bb 27       	eor	r27, r27
    1180:	66 27       	eor	r22, r22
    1182:	77 27       	eor	r23, r23
    1184:	cb 01       	movw	r24, r22
    1186:	97 f9       	bld	r25, 7
    1188:	08 95       	ret

0000118a <__mulsf3>:
    118a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__mulsf3x>
    118e:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__fp_round>
    1192:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_pscA>
    1196:	38 f0       	brcs	.+14     	; 0x11a6 <__mulsf3+0x1c>
    1198:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_pscB>
    119c:	20 f0       	brcs	.+8      	; 0x11a6 <__mulsf3+0x1c>
    119e:	95 23       	and	r25, r21
    11a0:	11 f0       	breq	.+4      	; 0x11a6 <__mulsf3+0x1c>
    11a2:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_inf>
    11a6:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_nan>
    11aa:	11 24       	eor	r1, r1
    11ac:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_szero>

000011b0 <__mulsf3x>:
    11b0:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_split3>
    11b4:	70 f3       	brcs	.-36     	; 0x1192 <__mulsf3+0x8>

000011b6 <__mulsf3_pse>:
    11b6:	95 9f       	mul	r25, r21
    11b8:	c1 f3       	breq	.-16     	; 0x11aa <__mulsf3+0x20>
    11ba:	95 0f       	add	r25, r21
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	55 1f       	adc	r21, r21
    11c0:	62 9f       	mul	r22, r18
    11c2:	f0 01       	movw	r30, r0
    11c4:	72 9f       	mul	r23, r18
    11c6:	bb 27       	eor	r27, r27
    11c8:	f0 0d       	add	r31, r0
    11ca:	b1 1d       	adc	r27, r1
    11cc:	63 9f       	mul	r22, r19
    11ce:	aa 27       	eor	r26, r26
    11d0:	f0 0d       	add	r31, r0
    11d2:	b1 1d       	adc	r27, r1
    11d4:	aa 1f       	adc	r26, r26
    11d6:	64 9f       	mul	r22, r20
    11d8:	66 27       	eor	r22, r22
    11da:	b0 0d       	add	r27, r0
    11dc:	a1 1d       	adc	r26, r1
    11de:	66 1f       	adc	r22, r22
    11e0:	82 9f       	mul	r24, r18
    11e2:	22 27       	eor	r18, r18
    11e4:	b0 0d       	add	r27, r0
    11e6:	a1 1d       	adc	r26, r1
    11e8:	62 1f       	adc	r22, r18
    11ea:	73 9f       	mul	r23, r19
    11ec:	b0 0d       	add	r27, r0
    11ee:	a1 1d       	adc	r26, r1
    11f0:	62 1f       	adc	r22, r18
    11f2:	83 9f       	mul	r24, r19
    11f4:	a0 0d       	add	r26, r0
    11f6:	61 1d       	adc	r22, r1
    11f8:	22 1f       	adc	r18, r18
    11fa:	74 9f       	mul	r23, r20
    11fc:	33 27       	eor	r19, r19
    11fe:	a0 0d       	add	r26, r0
    1200:	61 1d       	adc	r22, r1
    1202:	23 1f       	adc	r18, r19
    1204:	84 9f       	mul	r24, r20
    1206:	60 0d       	add	r22, r0
    1208:	21 1d       	adc	r18, r1
    120a:	82 2f       	mov	r24, r18
    120c:	76 2f       	mov	r23, r22
    120e:	6a 2f       	mov	r22, r26
    1210:	11 24       	eor	r1, r1
    1212:	9f 57       	subi	r25, 0x7F	; 127
    1214:	50 40       	sbci	r21, 0x00	; 0
    1216:	9a f0       	brmi	.+38     	; 0x123e <__mulsf3_pse+0x88>
    1218:	f1 f0       	breq	.+60     	; 0x1256 <__mulsf3_pse+0xa0>
    121a:	88 23       	and	r24, r24
    121c:	4a f0       	brmi	.+18     	; 0x1230 <__mulsf3_pse+0x7a>
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	bb 1f       	adc	r27, r27
    1224:	66 1f       	adc	r22, r22
    1226:	77 1f       	adc	r23, r23
    1228:	88 1f       	adc	r24, r24
    122a:	91 50       	subi	r25, 0x01	; 1
    122c:	50 40       	sbci	r21, 0x00	; 0
    122e:	a9 f7       	brne	.-22     	; 0x121a <__mulsf3_pse+0x64>
    1230:	9e 3f       	cpi	r25, 0xFE	; 254
    1232:	51 05       	cpc	r21, r1
    1234:	80 f0       	brcs	.+32     	; 0x1256 <__mulsf3_pse+0xa0>
    1236:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_inf>
    123a:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_szero>
    123e:	5f 3f       	cpi	r21, 0xFF	; 255
    1240:	e4 f3       	brlt	.-8      	; 0x123a <__mulsf3_pse+0x84>
    1242:	98 3e       	cpi	r25, 0xE8	; 232
    1244:	d4 f3       	brlt	.-12     	; 0x123a <__mulsf3_pse+0x84>
    1246:	86 95       	lsr	r24
    1248:	77 95       	ror	r23
    124a:	67 95       	ror	r22
    124c:	b7 95       	ror	r27
    124e:	f7 95       	ror	r31
    1250:	e7 95       	ror	r30
    1252:	9f 5f       	subi	r25, 0xFF	; 255
    1254:	c1 f7       	brne	.-16     	; 0x1246 <__mulsf3_pse+0x90>
    1256:	fe 2b       	or	r31, r30
    1258:	88 0f       	add	r24, r24
    125a:	91 1d       	adc	r25, r1
    125c:	96 95       	lsr	r25
    125e:	87 95       	ror	r24
    1260:	97 f9       	bld	r25, 7
    1262:	08 95       	ret

00001264 <do_rand>:
    1264:	8f 92       	push	r8
    1266:	9f 92       	push	r9
    1268:	af 92       	push	r10
    126a:	bf 92       	push	r11
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	ec 01       	movw	r28, r24
    127a:	68 81       	ld	r22, Y
    127c:	79 81       	ldd	r23, Y+1	; 0x01
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	61 15       	cp	r22, r1
    1284:	71 05       	cpc	r23, r1
    1286:	81 05       	cpc	r24, r1
    1288:	91 05       	cpc	r25, r1
    128a:	21 f4       	brne	.+8      	; 0x1294 <do_rand+0x30>
    128c:	64 e2       	ldi	r22, 0x24	; 36
    128e:	79 ed       	ldi	r23, 0xD9	; 217
    1290:	8b e5       	ldi	r24, 0x5B	; 91
    1292:	97 e0       	ldi	r25, 0x07	; 7
    1294:	2d e1       	ldi	r18, 0x1D	; 29
    1296:	33 ef       	ldi	r19, 0xF3	; 243
    1298:	41 e0       	ldi	r20, 0x01	; 1
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	0e 94 8e 09 	call	0x131c	; 0x131c <__divmodsi4>
    12a0:	49 01       	movw	r8, r18
    12a2:	5a 01       	movw	r10, r20
    12a4:	9b 01       	movw	r18, r22
    12a6:	ac 01       	movw	r20, r24
    12a8:	a7 ea       	ldi	r26, 0xA7	; 167
    12aa:	b1 e4       	ldi	r27, 0x41	; 65
    12ac:	0e 94 ad 09 	call	0x135a	; 0x135a <__muluhisi3>
    12b0:	6b 01       	movw	r12, r22
    12b2:	7c 01       	movw	r14, r24
    12b4:	ac ee       	ldi	r26, 0xEC	; 236
    12b6:	b4 ef       	ldi	r27, 0xF4	; 244
    12b8:	a5 01       	movw	r20, r10
    12ba:	94 01       	movw	r18, r8
    12bc:	0e 94 bb 09 	call	0x1376	; 0x1376 <__mulohisi3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	8c 0d       	add	r24, r12
    12c6:	9d 1d       	adc	r25, r13
    12c8:	ae 1d       	adc	r26, r14
    12ca:	bf 1d       	adc	r27, r15
    12cc:	b7 ff       	sbrs	r27, 7
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <do_rand+0x72>
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	a1 09       	sbc	r26, r1
    12d4:	b0 48       	sbci	r27, 0x80	; 128
    12d6:	88 83       	st	Y, r24
    12d8:	99 83       	std	Y+1, r25	; 0x01
    12da:	aa 83       	std	Y+2, r26	; 0x02
    12dc:	bb 83       	std	Y+3, r27	; 0x03
    12de:	9f 77       	andi	r25, 0x7F	; 127
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	df 90       	pop	r13
    12ea:	cf 90       	pop	r12
    12ec:	bf 90       	pop	r11
    12ee:	af 90       	pop	r10
    12f0:	9f 90       	pop	r9
    12f2:	8f 90       	pop	r8
    12f4:	08 95       	ret

000012f6 <rand_r>:
    12f6:	0e 94 32 09 	call	0x1264	; 0x1264 <do_rand>
    12fa:	08 95       	ret

000012fc <rand>:
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	0e 94 32 09 	call	0x1264	; 0x1264 <do_rand>
    1304:	08 95       	ret

00001306 <srand>:
    1306:	a0 e0       	ldi	r26, 0x00	; 0
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    130e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1312:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1316:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    131a:	08 95       	ret

0000131c <__divmodsi4>:
    131c:	05 2e       	mov	r0, r21
    131e:	97 fb       	bst	r25, 7
    1320:	1e f4       	brtc	.+6      	; 0x1328 <__divmodsi4+0xc>
    1322:	00 94       	com	r0
    1324:	0e 94 a5 09 	call	0x134a	; 0x134a <__negsi2>
    1328:	57 fd       	sbrc	r21, 7
    132a:	07 d0       	rcall	.+14     	; 0x133a <__divmodsi4_neg2>
    132c:	0e 94 c0 09 	call	0x1380	; 0x1380 <__udivmodsi4>
    1330:	07 fc       	sbrc	r0, 7
    1332:	03 d0       	rcall	.+6      	; 0x133a <__divmodsi4_neg2>
    1334:	4e f4       	brtc	.+18     	; 0x1348 <__divmodsi4_exit>
    1336:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__negsi2>

0000133a <__divmodsi4_neg2>:
    133a:	50 95       	com	r21
    133c:	40 95       	com	r20
    133e:	30 95       	com	r19
    1340:	21 95       	neg	r18
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	4f 4f       	sbci	r20, 0xFF	; 255
    1346:	5f 4f       	sbci	r21, 0xFF	; 255

00001348 <__divmodsi4_exit>:
    1348:	08 95       	ret

0000134a <__negsi2>:
    134a:	90 95       	com	r25
    134c:	80 95       	com	r24
    134e:	70 95       	com	r23
    1350:	61 95       	neg	r22
    1352:	7f 4f       	sbci	r23, 0xFF	; 255
    1354:	8f 4f       	sbci	r24, 0xFF	; 255
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	08 95       	ret

0000135a <__muluhisi3>:
    135a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__umulhisi3>
    135e:	a5 9f       	mul	r26, r21
    1360:	90 0d       	add	r25, r0
    1362:	b4 9f       	mul	r27, r20
    1364:	90 0d       	add	r25, r0
    1366:	a4 9f       	mul	r26, r20
    1368:	80 0d       	add	r24, r0
    136a:	91 1d       	adc	r25, r1
    136c:	11 24       	eor	r1, r1
    136e:	08 95       	ret

00001370 <__mulshisi3>:
    1370:	b7 ff       	sbrs	r27, 7
    1372:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__muluhisi3>

00001376 <__mulohisi3>:
    1376:	0e 94 ad 09 	call	0x135a	; 0x135a <__muluhisi3>
    137a:	82 1b       	sub	r24, r18
    137c:	93 0b       	sbc	r25, r19
    137e:	08 95       	ret

00001380 <__udivmodsi4>:
    1380:	a1 e2       	ldi	r26, 0x21	; 33
    1382:	1a 2e       	mov	r1, r26
    1384:	aa 1b       	sub	r26, r26
    1386:	bb 1b       	sub	r27, r27
    1388:	fd 01       	movw	r30, r26
    138a:	0d c0       	rjmp	.+26     	; 0x13a6 <__udivmodsi4_ep>

0000138c <__udivmodsi4_loop>:
    138c:	aa 1f       	adc	r26, r26
    138e:	bb 1f       	adc	r27, r27
    1390:	ee 1f       	adc	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	a2 17       	cp	r26, r18
    1396:	b3 07       	cpc	r27, r19
    1398:	e4 07       	cpc	r30, r20
    139a:	f5 07       	cpc	r31, r21
    139c:	20 f0       	brcs	.+8      	; 0x13a6 <__udivmodsi4_ep>
    139e:	a2 1b       	sub	r26, r18
    13a0:	b3 0b       	sbc	r27, r19
    13a2:	e4 0b       	sbc	r30, r20
    13a4:	f5 0b       	sbc	r31, r21

000013a6 <__udivmodsi4_ep>:
    13a6:	66 1f       	adc	r22, r22
    13a8:	77 1f       	adc	r23, r23
    13aa:	88 1f       	adc	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	1a 94       	dec	r1
    13b0:	69 f7       	brne	.-38     	; 0x138c <__udivmodsi4_loop>
    13b2:	60 95       	com	r22
    13b4:	70 95       	com	r23
    13b6:	80 95       	com	r24
    13b8:	90 95       	com	r25
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	bd 01       	movw	r22, r26
    13c0:	cf 01       	movw	r24, r30
    13c2:	08 95       	ret

000013c4 <__umulhisi3>:
    13c4:	a2 9f       	mul	r26, r18
    13c6:	b0 01       	movw	r22, r0
    13c8:	b3 9f       	mul	r27, r19
    13ca:	c0 01       	movw	r24, r0
    13cc:	a3 9f       	mul	r26, r19
    13ce:	70 0d       	add	r23, r0
    13d0:	81 1d       	adc	r24, r1
    13d2:	11 24       	eor	r1, r1
    13d4:	91 1d       	adc	r25, r1
    13d6:	b2 9f       	mul	r27, r18
    13d8:	70 0d       	add	r23, r0
    13da:	81 1d       	adc	r24, r1
    13dc:	11 24       	eor	r1, r1
    13de:	91 1d       	adc	r25, r1
    13e0:	08 95       	ret

000013e2 <_exit>:
    13e2:	f8 94       	cli

000013e4 <__stop_program>:
    13e4:	ff cf       	rjmp	.-2      	; 0x13e4 <__stop_program>
